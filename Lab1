{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":93602,"databundleVersionId":11148610,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Преобразование данных","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T12:30:25.680110Z","iopub.execute_input":"2025-05-26T12:30:25.680526Z","iopub.status.idle":"2025-05-26T12:30:33.982260Z","shell.execute_reply.started":"2025-05-26T12:30:25.680469Z","shell.execute_reply":"2025-05-26T12:30:33.981376Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/ensembles-competition/train_contest.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:44:21.942653Z","iopub.execute_input":"2025-05-26T13:44:21.943029Z","iopub.status.idle":"2025-05-26T13:44:24.853517Z","shell.execute_reply.started":"2025-05-26T13:44:21.943003Z","shell.execute_reply":"2025-05-26T13:44:24.852482Z"}},"outputs":[],"execution_count":249},{"cell_type":"code","source":"pred = pd.read_csv('/kaggle/input/ensembles-competition/for_prediction.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:44:24.855488Z","iopub.execute_input":"2025-05-26T13:44:24.855850Z","iopub.status.idle":"2025-05-26T13:44:25.651688Z","shell.execute_reply.started":"2025-05-26T13:44:24.855823Z","shell.execute_reply":"2025-05-26T13:44:25.650749Z"}},"outputs":[],"execution_count":250},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/ensembles-competition/train_contest.csv')\npred = pd.read_csv('/kaggle/input/ensembles-competition/for_prediction.csv')\ntarget = 'mean_salary'\n\ndata['is_train'] = 1\npred['is_train'] = 0\n\ny = data[target]  \n\ndata = data.drop(columns=[target])  \n\ncombined = pd.concat([data.reset_index(drop=True),\n                      pred.reset_index(drop=True)],\n                     axis=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:34.835071Z","iopub.execute_input":"2025-05-26T13:49:34.835428Z","iopub.status.idle":"2025-05-26T13:49:38.746685Z","shell.execute_reply.started":"2025-05-26T13:49:34.835406Z","shell.execute_reply":"2025-05-26T13:49:38.745617Z"}},"outputs":[],"execution_count":278},{"cell_type":"code","source":"data = combined.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:38.748377Z","iopub.execute_input":"2025-05-26T13:49:38.748719Z","iopub.status.idle":"2025-05-26T13:49:38.817425Z","shell.execute_reply.started":"2025-05-26T13:49:38.748689Z","shell.execute_reply":"2025-05-26T13:49:38.816660Z"}},"outputs":[],"execution_count":279},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:38.818207Z","iopub.execute_input":"2025-05-26T13:49:38.818471Z","iopub.status.idle":"2025-05-26T13:49:38.839475Z","shell.execute_reply.started":"2025-05-26T13:49:38.818452Z","shell.execute_reply":"2025-05-26T13:49:38.838240Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":280,"output_type":"execute_result","data":{"text/plain":"   premium                                  name department  has_test  \\\n0    False                 Агент по недвижимости        NaN     False   \n1    False                 IT-специалист/ техник        NaN     False   \n2    False   Старший/ведущий инженер-программист        NaN     False   \n3    False  Эксперт / методист приемной комиссии        NaN     False   \n4    False                  Табельщица/табельщик        NaN     False   \n\n   response_letter_required  \\\n0                     False   \n1                     False   \n2                     False   \n3                     False   \n4                     False   \n\n                                                area  \\\n0  {'id': '2', 'name': 'Санкт-Петербург', 'url': ...   \n1  {'id': '1130', 'name': 'Братск', 'url': 'https...   \n2  {'id': '76', 'name': 'Ростов-на-Дону', 'url': ...   \n3  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n4  {'id': '1613', 'name': 'Энгельс', 'url': 'http...   \n\n                                 type  \\\n0  {'id': 'open', 'name': 'Открытая'}   \n1  {'id': 'open', 'name': 'Открытая'}   \n2  {'id': 'open', 'name': 'Открытая'}   \n3  {'id': 'open', 'name': 'Открытая'}   \n4  {'id': 'open', 'name': 'Открытая'}   \n\n                                             address response_url  \\\n0  {'city': 'Санкт-Петербург', 'street': 'Невский...          NaN   \n1                                                NaN          NaN   \n2  {'city': 'Ростов-на-Дону', 'street': '60К-9, 1...          NaN   \n3  {'city': 'Москва', 'street': '1-я Миусская ули...          NaN   \n4  {'city': None, 'street': None, 'building': Non...          NaN   \n\n   sort_point_distance  ... working_time_modes accept_temporary  \\\n0                  NaN  ...                 []            False   \n1                  NaN  ...                 []            False   \n2                  NaN  ...                 []            False   \n3                  NaN  ...                 []            False   \n4                  NaN  ...                 []            False   \n\n                                         description  \\\n0  <p>Мы ищем людей, которым не достаточно того, ...   \n1  <ul> </ul> <p><em><strong>Навыки</strong></em>...   \n2  <strong>Обязанности:</strong> <ul> <li>Разрабо...   \n3  <p>Департамент информационных технологий РХТУ ...   \n4  <p><strong>Обязанности:</strong></p> <ul> <li>...   \n\n                                          experience  \\\n0        {'id': 'noExperience', 'name': 'Нет опыта'}   \n1  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n2  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n3  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n4  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n\n                                          key_skills  \\\n0  [{'name': 'Жилая недвижимость'}, {'name': 'Акт...   \n1                                                 []   \n2  [{'name': 'Linux'}, {'name': 'Bash'}, {'name':...   \n3  [{'name': '1С программирование'}, {'name': 'Об...   \n4  [{'name': 'Составление отчетности'}, {'name': ...   \n\n                                     specializations               region  \\\n0  [{'id': '20.20', 'name': 'Агент', 'profarea_id...      Санкт-Петербург   \n1  [{'id': '1.172', 'name': 'Начальный уровень, М...    Иркутская область   \n2  [{'id': '1.221', 'name': 'Программирование, Ра...   Ростовская область   \n3  [{'id': '3.150', 'name': 'Менеджмент продукта ...               Москва   \n4  [{'id': '18.142', 'name': 'Машиностроение', 'p...  Саратовская область   \n\n  immediate_redirect_url is_train  Id  \n0                    NaN        1 NaN  \n1                    NaN        1 NaN  \n2                    NaN        1 NaN  \n3                    NaN        1 NaN  \n4                    NaN        1 NaN  \n\n[5 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>name</th>\n      <th>department</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>area</th>\n      <th>type</th>\n      <th>address</th>\n      <th>response_url</th>\n      <th>sort_point_distance</th>\n      <th>...</th>\n      <th>working_time_modes</th>\n      <th>accept_temporary</th>\n      <th>description</th>\n      <th>experience</th>\n      <th>key_skills</th>\n      <th>specializations</th>\n      <th>region</th>\n      <th>immediate_redirect_url</th>\n      <th>is_train</th>\n      <th>Id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>Агент по недвижимости</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '2', 'name': 'Санкт-Петербург', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Санкт-Петербург', 'street': 'Невский...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>[]</td>\n      <td>False</td>\n      <td>&lt;p&gt;Мы ищем людей, которым не достаточно того, ...</td>\n      <td>{'id': 'noExperience', 'name': 'Нет опыта'}</td>\n      <td>[{'name': 'Жилая недвижимость'}, {'name': 'Акт...</td>\n      <td>[{'id': '20.20', 'name': 'Агент', 'profarea_id...</td>\n      <td>Санкт-Петербург</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>IT-специалист/ техник</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1130', 'name': 'Братск', 'url': 'https...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>[]</td>\n      <td>False</td>\n      <td>&lt;ul&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Навыки&lt;/strong&gt;&lt;/em&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[]</td>\n      <td>[{'id': '1.172', 'name': 'Начальный уровень, М...</td>\n      <td>Иркутская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>Старший/ведущий инженер-программист</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '76', 'name': 'Ростов-на-Дону', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Ростов-на-Дону', 'street': '60К-9, 1...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>[]</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Разрабо...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Linux'}, {'name': 'Bash'}, {'name':...</td>\n      <td>[{'id': '1.221', 'name': 'Программирование, Ра...</td>\n      <td>Ростовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>Эксперт / методист приемной комиссии</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': '1-я Миусская ули...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>[]</td>\n      <td>False</td>\n      <td>&lt;p&gt;Департамент информационных технологий РХТУ ...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': '1С программирование'}, {'name': 'Об...</td>\n      <td>[{'id': '3.150', 'name': 'Менеджмент продукта ...</td>\n      <td>Москва</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>Табельщица/табельщик</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1613', 'name': 'Энгельс', 'url': 'http...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': None, 'street': None, 'building': Non...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>[]</td>\n      <td>False</td>\n      <td>&lt;p&gt;&lt;strong&gt;Обязанности:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Составление отчетности'}, {'name': ...</td>\n      <td>[{'id': '18.142', 'name': 'Машиностроение', 'p...</td>\n      <td>Саратовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":280},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = data.replace('[]', np.nan)         \ndata = data.replace([], np.nan)           \ndata = data.replace(r'^\\s*$$\\s*$$', np.nan, regex=True) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:38.841146Z","iopub.execute_input":"2025-05-26T13:49:38.841425Z","iopub.status.idle":"2025-05-26T13:49:39.475428Z","shell.execute_reply.started":"2025-05-26T13:49:38.841405Z","shell.execute_reply":"2025-05-26T13:49:39.474479Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2152180100.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  data = data.replace('[]', np.nan)\n","output_type":"stream"}],"execution_count":281},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:40.203877Z","iopub.execute_input":"2025-05-26T13:49:40.204736Z","iopub.status.idle":"2025-05-26T13:49:40.231749Z","shell.execute_reply.started":"2025-05-26T13:49:40.204706Z","shell.execute_reply":"2025-05-26T13:49:40.230682Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":282,"output_type":"execute_result","data":{"text/plain":"   premium                                  name department  has_test  \\\n0    False                 Агент по недвижимости        NaN     False   \n1    False                 IT-специалист/ техник        NaN     False   \n2    False   Старший/ведущий инженер-программист        NaN     False   \n3    False  Эксперт / методист приемной комиссии        NaN     False   \n4    False                  Табельщица/табельщик        NaN     False   \n\n   response_letter_required  \\\n0                     False   \n1                     False   \n2                     False   \n3                     False   \n4                     False   \n\n                                                area  \\\n0  {'id': '2', 'name': 'Санкт-Петербург', 'url': ...   \n1  {'id': '1130', 'name': 'Братск', 'url': 'https...   \n2  {'id': '76', 'name': 'Ростов-на-Дону', 'url': ...   \n3  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n4  {'id': '1613', 'name': 'Энгельс', 'url': 'http...   \n\n                                 type  \\\n0  {'id': 'open', 'name': 'Открытая'}   \n1  {'id': 'open', 'name': 'Открытая'}   \n2  {'id': 'open', 'name': 'Открытая'}   \n3  {'id': 'open', 'name': 'Открытая'}   \n4  {'id': 'open', 'name': 'Открытая'}   \n\n                                             address response_url  \\\n0  {'city': 'Санкт-Петербург', 'street': 'Невский...          NaN   \n1                                                NaN          NaN   \n2  {'city': 'Ростов-на-Дону', 'street': '60К-9, 1...          NaN   \n3  {'city': 'Москва', 'street': '1-я Миусская ули...          NaN   \n4  {'city': None, 'street': None, 'building': Non...          NaN   \n\n   sort_point_distance  ... working_time_modes accept_temporary  \\\n0                  NaN  ...                NaN            False   \n1                  NaN  ...                NaN            False   \n2                  NaN  ...                NaN            False   \n3                  NaN  ...                NaN            False   \n4                  NaN  ...                NaN            False   \n\n                                         description  \\\n0  <p>Мы ищем людей, которым не достаточно того, ...   \n1  <ul> </ul> <p><em><strong>Навыки</strong></em>...   \n2  <strong>Обязанности:</strong> <ul> <li>Разрабо...   \n3  <p>Департамент информационных технологий РХТУ ...   \n4  <p><strong>Обязанности:</strong></p> <ul> <li>...   \n\n                                          experience  \\\n0        {'id': 'noExperience', 'name': 'Нет опыта'}   \n1  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n2  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n3  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n4  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n\n                                          key_skills  \\\n0  [{'name': 'Жилая недвижимость'}, {'name': 'Акт...   \n1                                                NaN   \n2  [{'name': 'Linux'}, {'name': 'Bash'}, {'name':...   \n3  [{'name': '1С программирование'}, {'name': 'Об...   \n4  [{'name': 'Составление отчетности'}, {'name': ...   \n\n                                     specializations               region  \\\n0  [{'id': '20.20', 'name': 'Агент', 'profarea_id...      Санкт-Петербург   \n1  [{'id': '1.172', 'name': 'Начальный уровень, М...    Иркутская область   \n2  [{'id': '1.221', 'name': 'Программирование, Ра...   Ростовская область   \n3  [{'id': '3.150', 'name': 'Менеджмент продукта ...               Москва   \n4  [{'id': '18.142', 'name': 'Машиностроение', 'p...  Саратовская область   \n\n  immediate_redirect_url is_train  Id  \n0                    NaN        1 NaN  \n1                    NaN        1 NaN  \n2                    NaN        1 NaN  \n3                    NaN        1 NaN  \n4                    NaN        1 NaN  \n\n[5 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>name</th>\n      <th>department</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>area</th>\n      <th>type</th>\n      <th>address</th>\n      <th>response_url</th>\n      <th>sort_point_distance</th>\n      <th>...</th>\n      <th>working_time_modes</th>\n      <th>accept_temporary</th>\n      <th>description</th>\n      <th>experience</th>\n      <th>key_skills</th>\n      <th>specializations</th>\n      <th>region</th>\n      <th>immediate_redirect_url</th>\n      <th>is_train</th>\n      <th>Id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>Агент по недвижимости</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '2', 'name': 'Санкт-Петербург', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Санкт-Петербург', 'street': 'Невский...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;Мы ищем людей, которым не достаточно того, ...</td>\n      <td>{'id': 'noExperience', 'name': 'Нет опыта'}</td>\n      <td>[{'name': 'Жилая недвижимость'}, {'name': 'Акт...</td>\n      <td>[{'id': '20.20', 'name': 'Агент', 'profarea_id...</td>\n      <td>Санкт-Петербург</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>IT-специалист/ техник</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1130', 'name': 'Братск', 'url': 'https...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;ul&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Навыки&lt;/strong&gt;&lt;/em&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>NaN</td>\n      <td>[{'id': '1.172', 'name': 'Начальный уровень, М...</td>\n      <td>Иркутская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>Старший/ведущий инженер-программист</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '76', 'name': 'Ростов-на-Дону', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Ростов-на-Дону', 'street': '60К-9, 1...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Разрабо...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Linux'}, {'name': 'Bash'}, {'name':...</td>\n      <td>[{'id': '1.221', 'name': 'Программирование, Ра...</td>\n      <td>Ростовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>Эксперт / методист приемной комиссии</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': '1-я Миусская ули...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;Департамент информационных технологий РХТУ ...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': '1С программирование'}, {'name': 'Об...</td>\n      <td>[{'id': '3.150', 'name': 'Менеджмент продукта ...</td>\n      <td>Москва</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>Табельщица/табельщик</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1613', 'name': 'Энгельс', 'url': 'http...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': None, 'street': None, 'building': Non...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;&lt;strong&gt;Обязанности:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Составление отчетности'}, {'name': ...</td>\n      <td>[{'id': '18.142', 'name': 'Машиностроение', 'p...</td>\n      <td>Саратовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":282},{"cell_type":"code","source":"print(data['name'].unique())\nlen(data['name'].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:49:43.598086Z","iopub.execute_input":"2025-05-26T13:49:43.598489Z","iopub.status.idle":"2025-05-26T13:49:43.633749Z","shell.execute_reply.started":"2025-05-26T13:49:43.598462Z","shell.execute_reply":"2025-05-26T13:49:43.632841Z"}},"outputs":[{"name":"stdout","text":"['Агент по недвижимости' 'IT-специалист/ техник'\n 'Старший/ведущий инженер-программист' ...\n 'Java-разработчик в нефтегазовый продукт'\n 'Руководитель Отдела развития банковских технологий Cектора бизнес анализа'\n 'Старший специалист по Информационной Безопасности']\n","output_type":"stream"},{"execution_count":283,"output_type":"execute_result","data":{"text/plain":"16276"},"metadata":{}}],"execution_count":283},{"cell_type":"code","source":"def calculate_unknown_ratio(series):\n    explicit_missing = series.isna()\n    implicit_missing = series.astype(str).str.strip().isin(['', 'nan'])\n    \n    total_missing = explicit_missing | implicit_missing\n    ratio = total_missing.mean() * 100\n    \n    return ratio\n\nmissing_ratio = calculate_unknown_ratio(data['name'])\n\nprint(f\"Доля неизвестных значений в столбце 'name': {missing_ratio:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:51:26.225825Z","iopub.execute_input":"2025-05-26T13:51:26.226215Z","iopub.status.idle":"2025-05-26T13:51:26.254629Z","shell.execute_reply.started":"2025-05-26T13:51:26.226190Z","shell.execute_reply":"2025-05-26T13:51:26.253374Z"}},"outputs":[{"name":"stdout","text":"Доля неизвестных значений в столбце 'name': 0.00%\n","output_type":"stream"}],"execution_count":284},{"cell_type":"code","source":"data.reset_index(drop=True, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:52:53.491442Z","iopub.execute_input":"2025-05-26T13:52:53.491817Z","iopub.status.idle":"2025-05-26T13:52:53.497313Z","shell.execute_reply.started":"2025-05-26T13:52:53.491795Z","shell.execute_reply":"2025-05-26T13:52:53.496316Z"}},"outputs":[],"execution_count":285},{"cell_type":"markdown","source":"# Разобьем все вакансии на К кластеров","metadata":{}},{"cell_type":"code","source":"import nltk\nnltk.download('stopwords')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:46:42.067379Z","iopub.execute_input":"2025-05-26T13:46:42.067737Z","iopub.status.idle":"2025-05-26T13:46:42.075173Z","shell.execute_reply.started":"2025-05-26T13:46:42.067714Z","shell.execute_reply":"2025-05-26T13:46:42.074130Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"},{"execution_count":268,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":268},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nrussian_stopwords = stopwords.words('russian')\n\nvectorizer = TfidfVectorizer(stop_words=russian_stopwords)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:52:57.066567Z","iopub.execute_input":"2025-05-26T13:52:57.066918Z","iopub.status.idle":"2025-05-26T13:52:57.074393Z","shell.execute_reply.started":"2025-05-26T13:52:57.066896Z","shell.execute_reply":"2025-05-26T13:52:57.073371Z"}},"outputs":[],"execution_count":286},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nnames = data['name'].dropna()\n\nX = vectorizer.fit_transform(names)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:52:59.142017Z","iopub.execute_input":"2025-05-26T13:52:59.142431Z","iopub.status.idle":"2025-05-26T13:52:59.407109Z","shell.execute_reply.started":"2025-05-26T13:52:59.142407Z","shell.execute_reply":"2025-05-26T13:52:59.406205Z"}},"outputs":[],"execution_count":287},{"cell_type":"code","source":"data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:04.360571Z","iopub.execute_input":"2025-05-26T13:53:04.360901Z","iopub.status.idle":"2025-05-26T13:53:04.424069Z","shell.execute_reply.started":"2025-05-26T13:53:04.360879Z","shell.execute_reply":"2025-05-26T13:53:04.423072Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":288,"output_type":"execute_result","data":{"text/plain":"       premium                                               name  \\\n0        False                              Агент по недвижимости   \n1        False                              IT-специалист/ техник   \n2        False                Старший/ведущий инженер-программист   \n3        False               Эксперт / методист приемной комиссии   \n4        False                               Табельщица/табельщик   \n...        ...                                                ...   \n37585    False                                        HR менеджер   \n37586    False                             Руководитель HR отдела   \n37587    False                        Системный аналитик (Стажер)   \n37588    False  Руководитель Отдела развития банковских технол...   \n37589    False  Старший специалист по Информационной Безопасности   \n\n                                        department  has_test  \\\n0                                              NaN     False   \n1                                              NaN     False   \n2                                              NaN     False   \n3                                              NaN     False   \n4                                              NaN     False   \n...                                            ...       ...   \n37585                                          NaN     False   \n37586                                          NaN     False   \n37587  {'id': '80-80-bank', 'name': ' Альфа-Банк'}     False   \n37588                                          NaN     False   \n37589                                          NaN     False   \n\n       response_letter_required  \\\n0                         False   \n1                         False   \n2                         False   \n3                         False   \n4                         False   \n...                         ...   \n37585                     False   \n37586                     False   \n37587                     False   \n37588                     False   \n37589                     False   \n\n                                                    area  \\\n0      {'id': '2', 'name': 'Санкт-Петербург', 'url': ...   \n1      {'id': '1130', 'name': 'Братск', 'url': 'https...   \n2      {'id': '76', 'name': 'Ростов-на-Дону', 'url': ...   \n3      {'id': '1', 'name': 'Москва', 'url': 'https://...   \n4      {'id': '1613', 'name': 'Энгельс', 'url': 'http...   \n...                                                  ...   \n37585  {'id': '131', 'name': 'Симферополь', 'url': 'h...   \n37586  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n37587  {'id': '3', 'name': 'Екатеринбург', 'url': 'ht...   \n37588  {'id': '22', 'name': 'Владивосток', 'url': 'ht...   \n37589  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n\n                                     type  \\\n0      {'id': 'open', 'name': 'Открытая'}   \n1      {'id': 'open', 'name': 'Открытая'}   \n2      {'id': 'open', 'name': 'Открытая'}   \n3      {'id': 'open', 'name': 'Открытая'}   \n4      {'id': 'open', 'name': 'Открытая'}   \n...                                   ...   \n37585  {'id': 'open', 'name': 'Открытая'}   \n37586  {'id': 'open', 'name': 'Открытая'}   \n37587  {'id': 'open', 'name': 'Открытая'}   \n37588  {'id': 'open', 'name': 'Открытая'}   \n37589  {'id': 'open', 'name': 'Открытая'}   \n\n                                                 address response_url  \\\n0      {'city': 'Санкт-Петербург', 'street': 'Невский...          NaN   \n1                                                    NaN          NaN   \n2      {'city': 'Ростов-на-Дону', 'street': '60К-9, 1...          NaN   \n3      {'city': 'Москва', 'street': '1-я Миусская ули...          NaN   \n4      {'city': None, 'street': None, 'building': Non...          NaN   \n...                                                  ...          ...   \n37585  {'city': 'Симферополь', 'street': 'улица Жени ...          NaN   \n37586  {'city': 'Москва', 'street': 'Электрический пе...          NaN   \n37587  {'city': 'Екатеринбург', 'street': 'Горького',...          NaN   \n37588  {'city': 'Владивосток', 'street': 'Партизански...          NaN   \n37589  {'city': 'Москва', 'street': 'Западный админис...          NaN   \n\n       sort_point_distance  ... working_time_modes accept_temporary  \\\n0                      NaN  ...                NaN            False   \n1                      NaN  ...                NaN            False   \n2                      NaN  ...                NaN            False   \n3                      NaN  ...                NaN            False   \n4                      NaN  ...                NaN            False   \n...                    ...  ...                ...              ...   \n37585                  NaN  ...                NaN            False   \n37586                  NaN  ...                NaN            False   \n37587                  NaN  ...                NaN            False   \n37588                  NaN  ...                NaN            False   \n37589                  NaN  ...                NaN            False   \n\n                                             description  \\\n0      <p>Мы ищем людей, которым не достаточно того, ...   \n1      <ul> </ul> <p><em><strong>Навыки</strong></em>...   \n2      <strong>Обязанности:</strong> <ul> <li>Разрабо...   \n3      <p>Департамент информационных технологий РХТУ ...   \n4      <p><strong>Обязанности:</strong></p> <ul> <li>...   \n...                                                  ...   \n37585  <strong>Обязанности:</strong> <ul> <li>Поиск и...   \n37586  <strong>Обязанности:</strong> <ul> <li>Организ...   \n37587  <p>Альфа-Банк — крупнейший частный банк России...   \n37588  <strong>Обязанности:</strong> <ul> <li> <p>Ана...   \n37589  <strong>Обязанности:</strong> <ul> <li>Админис...   \n\n                                              experience  \\\n0            {'id': 'noExperience', 'name': 'Нет опыта'}   \n1      {'id': 'between1And3', 'name': 'От 1 года до 3...   \n2      {'id': 'between1And3', 'name': 'От 1 года до 3...   \n3      {'id': 'between1And3', 'name': 'От 1 года до 3...   \n4      {'id': 'between1And3', 'name': 'От 1 года до 3...   \n...                                                  ...   \n37585  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n37586  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n37587        {'id': 'noExperience', 'name': 'Нет опыта'}   \n37588  {'id': 'between1And3', 'name': 'От 1 года до 3...   \n37589    {'id': 'between3And6', 'name': 'От 3 до 6 лет'}   \n\n                                              key_skills  \\\n0      [{'name': 'Жилая недвижимость'}, {'name': 'Акт...   \n1                                                    NaN   \n2      [{'name': 'Linux'}, {'name': 'Bash'}, {'name':...   \n3      [{'name': '1С программирование'}, {'name': 'Об...   \n4      [{'name': 'Составление отчетности'}, {'name': ...   \n...                                                  ...   \n37585  [{'name': 'Подбор персонала'}, {'name': 'Работ...   \n37586  [{'name': 'Ведение отчетности'}, {'name': 'Вед...   \n37587  [{'name': 'Разработка технических заданий'}, {...   \n37588  [{'name': 'MS PowerPoint'}, {'name': 'Бизнес-а...   \n37589  [{'name': 'Информационная безопасность'}, {'na...   \n\n                                         specializations  \\\n0      [{'id': '20.20', 'name': 'Агент', 'profarea_id...   \n1      [{'id': '1.172', 'name': 'Начальный уровень, М...   \n2      [{'id': '1.221', 'name': 'Программирование, Ра...   \n3      [{'id': '3.150', 'name': 'Менеджмент продукта ...   \n4      [{'id': '18.142', 'name': 'Машиностроение', 'p...   \n...                                                  ...   \n37585  [{'id': '6.254', 'name': 'Рекрутмент', 'profar...   \n37586  [{'id': '6.254', 'name': 'Рекрутмент', 'profar...   \n37587  [{'id': '17.751', 'name': 'Другое', 'profarea_...   \n37588  [{'id': '1.221', 'name': 'Программирование, Ра...   \n37589  [{'id': '1.110', 'name': 'Компьютерная безопас...   \n\n                     region immediate_redirect_url is_train      Id  \n0           Санкт-Петербург                    NaN        1     NaN  \n1         Иркутская область                    NaN        1     NaN  \n2        Ростовская область                    NaN        1     NaN  \n3                    Москва                    NaN        1     NaN  \n4       Саратовская область                    NaN        1     NaN  \n...                     ...                    ...      ...     ...  \n37585       Республика Крым                    NaN        0  7513.0  \n37586                Москва                    NaN        0  7514.0  \n37587  Свердловская область                    NaN        0  7515.0  \n37588       Приморский край                    NaN        0  7516.0  \n37589                Москва                    NaN        0  7517.0  \n\n[37590 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>name</th>\n      <th>department</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>area</th>\n      <th>type</th>\n      <th>address</th>\n      <th>response_url</th>\n      <th>sort_point_distance</th>\n      <th>...</th>\n      <th>working_time_modes</th>\n      <th>accept_temporary</th>\n      <th>description</th>\n      <th>experience</th>\n      <th>key_skills</th>\n      <th>specializations</th>\n      <th>region</th>\n      <th>immediate_redirect_url</th>\n      <th>is_train</th>\n      <th>Id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>Агент по недвижимости</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '2', 'name': 'Санкт-Петербург', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Санкт-Петербург', 'street': 'Невский...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;Мы ищем людей, которым не достаточно того, ...</td>\n      <td>{'id': 'noExperience', 'name': 'Нет опыта'}</td>\n      <td>[{'name': 'Жилая недвижимость'}, {'name': 'Акт...</td>\n      <td>[{'id': '20.20', 'name': 'Агент', 'profarea_id...</td>\n      <td>Санкт-Петербург</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>IT-специалист/ техник</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1130', 'name': 'Братск', 'url': 'https...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;ul&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Навыки&lt;/strong&gt;&lt;/em&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>NaN</td>\n      <td>[{'id': '1.172', 'name': 'Начальный уровень, М...</td>\n      <td>Иркутская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>Старший/ведущий инженер-программист</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '76', 'name': 'Ростов-на-Дону', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Ростов-на-Дону', 'street': '60К-9, 1...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Разрабо...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Linux'}, {'name': 'Bash'}, {'name':...</td>\n      <td>[{'id': '1.221', 'name': 'Программирование, Ра...</td>\n      <td>Ростовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>Эксперт / методист приемной комиссии</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': '1-я Миусская ули...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;Департамент информационных технологий РХТУ ...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': '1С программирование'}, {'name': 'Об...</td>\n      <td>[{'id': '3.150', 'name': 'Менеджмент продукта ...</td>\n      <td>Москва</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>Табельщица/табельщик</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1613', 'name': 'Энгельс', 'url': 'http...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': None, 'street': None, 'building': Non...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;&lt;strong&gt;Обязанности:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Составление отчетности'}, {'name': ...</td>\n      <td>[{'id': '18.142', 'name': 'Машиностроение', 'p...</td>\n      <td>Саратовская область</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>37585</th>\n      <td>False</td>\n      <td>HR менеджер</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '131', 'name': 'Симферополь', 'url': 'h...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Симферополь', 'street': 'улица Жени ...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Поиск и...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Подбор персонала'}, {'name': 'Работ...</td>\n      <td>[{'id': '6.254', 'name': 'Рекрутмент', 'profar...</td>\n      <td>Республика Крым</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>7513.0</td>\n    </tr>\n    <tr>\n      <th>37586</th>\n      <td>False</td>\n      <td>Руководитель HR отдела</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': 'Электрический пе...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Организ...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'Ведение отчетности'}, {'name': 'Вед...</td>\n      <td>[{'id': '6.254', 'name': 'Рекрутмент', 'profar...</td>\n      <td>Москва</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>7514.0</td>\n    </tr>\n    <tr>\n      <th>37587</th>\n      <td>False</td>\n      <td>Системный аналитик (Стажер)</td>\n      <td>{'id': '80-80-bank', 'name': ' Альфа-Банк'}</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '3', 'name': 'Екатеринбург', 'url': 'ht...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Екатеринбург', 'street': 'Горького',...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;p&gt;Альфа-Банк — крупнейший частный банк России...</td>\n      <td>{'id': 'noExperience', 'name': 'Нет опыта'}</td>\n      <td>[{'name': 'Разработка технических заданий'}, {...</td>\n      <td>[{'id': '17.751', 'name': 'Другое', 'profarea_...</td>\n      <td>Свердловская область</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>7515.0</td>\n    </tr>\n    <tr>\n      <th>37588</th>\n      <td>False</td>\n      <td>Руководитель Отдела развития банковских технол...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '22', 'name': 'Владивосток', 'url': 'ht...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Владивосток', 'street': 'Партизански...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Ана...</td>\n      <td>{'id': 'between1And3', 'name': 'От 1 года до 3...</td>\n      <td>[{'name': 'MS PowerPoint'}, {'name': 'Бизнес-а...</td>\n      <td>[{'id': '1.221', 'name': 'Программирование, Ра...</td>\n      <td>Приморский край</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>7516.0</td>\n    </tr>\n    <tr>\n      <th>37589</th>\n      <td>False</td>\n      <td>Старший специалист по Информационной Безопасности</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': 'Западный админис...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>&lt;strong&gt;Обязанности:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Админис...</td>\n      <td>{'id': 'between3And6', 'name': 'От 3 до 6 лет'}</td>\n      <td>[{'name': 'Информационная безопасность'}, {'na...</td>\n      <td>[{'id': '1.110', 'name': 'Компьютерная безопас...</td>\n      <td>Москва</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>7517.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>37590 rows × 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":288},{"cell_type":"code","source":"k_range = range(2, 40, 2)\ninertias = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(X)\n    inertias.append(kmeans.inertia_)\n\nplt.figure(figsize=(8, 5))\nplt.plot(k_range, inertias, marker='o', linestyle='-')\nplt.title('Метод локтя для выбора числа кластеров')\nplt.xlabel('Число кластеров')\nplt.ylabel('Инерция')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:46:47.059426Z","iopub.execute_input":"2025-05-26T13:46:47.060218Z","iopub.status.idle":"2025-05-26T13:47:26.212336Z","shell.execute_reply.started":"2025-05-26T13:46:47.060193Z","shell.execute_reply":"2025-05-26T13:47:26.211346Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":271},{"cell_type":"code","source":"kmeans = KMeans(n_clusters=22, random_state=42)\nclusters = kmeans.fit_predict(X)\n\ndata['job_cluster'] = np.nan\ndata.loc[names.index, 'job_cluster'] = clusters.astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:14.787540Z","iopub.execute_input":"2025-05-26T13:53:14.787890Z","iopub.status.idle":"2025-05-26T13:53:17.085505Z","shell.execute_reply.started":"2025-05-26T13:53:14.787867Z","shell.execute_reply":"2025-05-26T13:53:17.084458Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Длина names.index: 37590\nДлина clusters: 37590\nТип индекса names: <class 'pandas.core.indexes.base.Index'>\nИндексы names: [0, 1, 2, 3, 4]\n","output_type":"stream"}],"execution_count":289},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:27.672890Z","iopub.execute_input":"2025-05-26T13:53:27.673984Z","iopub.status.idle":"2025-05-26T13:53:27.756290Z","shell.execute_reply.started":"2025-05-26T13:53:27.673952Z","shell.execute_reply":"2025-05-26T13:53:27.755030Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 37590 entries, 0 to 37589\nData columns (total 34 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   premium                   37590 non-null  bool   \n 1   name                      37590 non-null  object \n 2   department                939 non-null    object \n 3   has_test                  37590 non-null  bool   \n 4   response_letter_required  37590 non-null  bool   \n 5   area                      37590 non-null  object \n 6   type                      37590 non-null  object \n 7   address                   23858 non-null  object \n 8   response_url              1 non-null      object \n 9   sort_point_distance       0 non-null      float64\n 10  published_at              37590 non-null  object \n 11  created_at                37590 non-null  object \n 12  archived                  37590 non-null  bool   \n 13  insider_interview         117 non-null    object \n 14  url                       37590 non-null  object \n 15  alternate_url             37590 non-null  object \n 16  relations                 0 non-null      float64\n 17  employer                  37590 non-null  object \n 18  snippet                   37590 non-null  object \n 19  contacts                  23816 non-null  object \n 20  schedule                  37590 non-null  object \n 21  working_days              247 non-null    object \n 22  working_time_intervals    1288 non-null   object \n 23  working_time_modes        726 non-null    object \n 24  accept_temporary          37590 non-null  bool   \n 25  description               37590 non-null  object \n 26  experience                37590 non-null  object \n 27  key_skills                31091 non-null  object \n 28  specializations           37590 non-null  object \n 29  region                    37590 non-null  object \n 30  immediate_redirect_url    1 non-null      object \n 31  is_train                  37590 non-null  int64  \n 32  Id                        7518 non-null   float64\n 33  job_cluster               37590 non-null  float64\ndtypes: bool(5), float64(4), int64(1), object(24)\nmemory usage: 8.5+ MB\n","output_type":"stream"}],"execution_count":290},{"cell_type":"markdown","source":"# Преобразуем остальные признаки","metadata":{}},{"cell_type":"code","source":"data['working_days'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:30.510087Z","iopub.execute_input":"2025-05-26T13:53:30.510560Z","iopub.status.idle":"2025-05-26T13:53:30.519352Z","shell.execute_reply.started":"2025-05-26T13:53:30.510533Z","shell.execute_reply":"2025-05-26T13:53:30.518336Z"}},"outputs":[{"execution_count":291,"output_type":"execute_result","data":{"text/plain":"array([nan,\n       \"[{'id': 'only_saturday_and_sunday', 'name': 'Работа только по\\\\xa0сб\\\\xa0и\\\\xa0вс'}]\"],\n      dtype=object)"},"metadata":{}}],"execution_count":291},{"cell_type":"code","source":"data['working_time_intervals'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:30.664915Z","iopub.execute_input":"2025-05-26T13:53:30.665800Z","iopub.status.idle":"2025-05-26T13:53:30.673599Z","shell.execute_reply.started":"2025-05-26T13:53:30.665763Z","shell.execute_reply":"2025-05-26T13:53:30.672652Z"}},"outputs":[{"execution_count":292,"output_type":"execute_result","data":{"text/plain":"array([nan,\n       \"[{'id': 'from_four_to_six_hours_in_a_day', 'name': 'Можно работать сменами по\\\\xa04–6 часов в\\\\xa0день'}]\"],\n      dtype=object)"},"metadata":{}}],"execution_count":292},{"cell_type":"code","source":"data['working_time_modes'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:30.813504Z","iopub.execute_input":"2025-05-26T13:53:30.813803Z","iopub.status.idle":"2025-05-26T13:53:30.821644Z","shell.execute_reply.started":"2025-05-26T13:53:30.813783Z","shell.execute_reply":"2025-05-26T13:53:30.820536Z"}},"outputs":[{"execution_count":293,"output_type":"execute_result","data":{"text/plain":"array([nan,\n       \"[{'id': 'start_after_sixteen', 'name': 'Можно начинать работать после 16:00'}]\"],\n      dtype=object)"},"metadata":{}}],"execution_count":293},{"cell_type":"code","source":"data['published_at'] = pd.to_datetime(data['published_at'], errors='coerce')\n\ndata['date_float'] = data['published_at'].dt.year + data['published_at'].dt.month / 100\n\ndata.drop(columns=['published_at', 'created_at'], inplace=True, errors='ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:31.083964Z","iopub.execute_input":"2025-05-26T13:53:31.084353Z","iopub.status.idle":"2025-05-26T13:53:31.362215Z","shell.execute_reply.started":"2025-05-26T13:53:31.084327Z","shell.execute_reply":"2025-05-26T13:53:31.360671Z"}},"outputs":[],"execution_count":294},{"cell_type":"code","source":"# 1. only_saturday_and_sunday\ntarget_text_1 = \"[{'id': 'only_saturday_and_sunday', 'name': 'Работа только по\\\\xa0сб\\\\xa0и\\\\xa0вс'}]\"\ndata['only_saturday_and_sunday'] = data['working_days'].apply(\n    lambda x: 1 if x == target_text_1 else 0\n)\n\n# 2. working_time_intervals\ntarget_text_2 = \"[{'id': 'start_after_sixteen', 'name': 'Можно начинать работать после 16:00'}]\"\ndata['start_after_sixteen_in_intervals'] = data['working_time_intervals'].apply(\n    lambda x: 1 if x == target_text_2 else 0\n)\n\n# 3. working_time_modes\ntarget_text_3 = \"[{'id': 'start_after_sixteen', 'name': 'Можно начинать работать после 16:00'}]\"\ndata['start_after_sixteen_in_modes'] = data['working_time_modes'].apply(\n    lambda x: 1 if x == target_text_3 else 0\n)\n\nbinary_cols = [\n    'only_saturday_and_sunday',\n    'start_after_sixteen_in_intervals',\n    'start_after_sixteen_in_modes']\n\ndata[binary_cols] = data[binary_cols].fillna(0).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:31.363992Z","iopub.execute_input":"2025-05-26T13:53:31.364393Z","iopub.status.idle":"2025-05-26T13:53:31.423304Z","shell.execute_reply.started":"2025-05-26T13:53:31.364360Z","shell.execute_reply":"2025-05-26T13:53:31.422317Z"}},"outputs":[],"execution_count":295},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ndef replace_boolean_with_binary(df):\n    \"\"\"\n    Заменяет все True/False и их строковые аналоги ('True', 'False')\n    на числа 1 и 0 во всех колонках DataFrame.\n\n    Args:\n        df (pd.DataFrame): входной датафрейм\n\n    Returns:\n        pd.DataFrame: изменённый датафрейм\n    \"\"\"\n    def replace_value(val):\n        if isinstance(val, str):\n            val_clean = val.strip().lower()\n            if val_clean in ['true', '1', 'yes', 'да']:\n                return 1\n            elif val_clean in ['false', '0', 'no', 'нет']:\n                return 0\n        elif isinstance(val, bool):\n            return 1 if val else 0\n        return val  # Оставляем как есть, если не True/False\n\n    return df.applymap(replace_value)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:34.618977Z","iopub.execute_input":"2025-05-26T13:53:34.619339Z","iopub.status.idle":"2025-05-26T13:53:34.626156Z","shell.execute_reply.started":"2025-05-26T13:53:34.619304Z","shell.execute_reply":"2025-05-26T13:53:34.625073Z"}},"outputs":[],"execution_count":296},{"cell_type":"code","source":"drop_cols = ['description', 'name', 'url', 'alternate_url', 'response_url', 'immediate_redirect_url', 'insider_interview', 'sort_point_distance', 'contacts', 'relations', \n             'working_days', 'working_time_intervals', 'working_time_modes']\n\nsort_data = data.copy()\nsort_data = replace_boolean_with_binary(sort_data)\nsort_data.drop(columns=drop_cols, inplace=True, errors='ignore') \nsort_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:34.784704Z","iopub.execute_input":"2025-05-26T13:53:34.785064Z","iopub.status.idle":"2025-05-26T13:53:36.946020Z","shell.execute_reply.started":"2025-05-26T13:53:34.785040Z","shell.execute_reply":"2025-05-26T13:53:36.945194Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2149247331.py:26: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  return df.applymap(replace_value)\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":297,"output_type":"execute_result","data":{"text/plain":"   premium department  has_test  response_letter_required  \\\n0        0        NaN         0                         0   \n1        0        NaN         0                         0   \n2        0        NaN         0                         0   \n3        0        NaN         0                         0   \n4        0        NaN         0                         0   \n\n                                                area  \\\n0  {'id': '2', 'name': 'Санкт-Петербург', 'url': ...   \n1  {'id': '1130', 'name': 'Братск', 'url': 'https...   \n2  {'id': '76', 'name': 'Ростов-на-Дону', 'url': ...   \n3  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n4  {'id': '1613', 'name': 'Энгельс', 'url': 'http...   \n\n                                 type  \\\n0  {'id': 'open', 'name': 'Открытая'}   \n1  {'id': 'open', 'name': 'Открытая'}   \n2  {'id': 'open', 'name': 'Открытая'}   \n3  {'id': 'open', 'name': 'Открытая'}   \n4  {'id': 'open', 'name': 'Открытая'}   \n\n                                             address  archived  \\\n0  {'city': 'Санкт-Петербург', 'street': 'Невский...         0   \n1                                                NaN         0   \n2  {'city': 'Ростов-на-Дону', 'street': '60К-9, 1...         0   \n3  {'city': 'Москва', 'street': '1-я Миусская ули...         0   \n4  {'city': None, 'street': None, 'building': Non...         0   \n\n                                            employer  \\\n0  {'id': '541016', 'name': 'АРИН', 'url': 'https...   \n1  {'id': '1136625', 'name': 'СМП-38', 'url': 'ht...   \n2  {'id': '611346', 'name': 'САРМАТ, НПП', 'url':...   \n3  {'id': '171255', 'name': 'РХТУ им. Д.И. Мендел...   \n4  {'id': '617150', 'name': 'Сигнал, группа компа...   \n\n                                             snippet  ...  \\\n0  {'requirement': 'Уверенное знание компьютера‚ ...  ...   \n1  {'requirement': 'Навыки. Коммуникативные навык...  ...   \n2  {'requirement': 'Высшее инженерно-техническое ...  ...   \n3  {'requirement': 'Высшее образование. Опыт рабо...  ...   \n4  {'requirement': 'Знание в совершенстве програм...  ...   \n\n                                          key_skills  \\\n0  [{'name': 'Жилая недвижимость'}, {'name': 'Акт...   \n1                                                NaN   \n2  [{'name': 'Linux'}, {'name': 'Bash'}, {'name':...   \n3  [{'name': '1С программирование'}, {'name': 'Об...   \n4  [{'name': 'Составление отчетности'}, {'name': ...   \n\n                                     specializations               region  \\\n0  [{'id': '20.20', 'name': 'Агент', 'profarea_id...      Санкт-Петербург   \n1  [{'id': '1.172', 'name': 'Начальный уровень, М...    Иркутская область   \n2  [{'id': '1.221', 'name': 'Программирование, Ра...   Ростовская область   \n3  [{'id': '3.150', 'name': 'Менеджмент продукта ...               Москва   \n4  [{'id': '18.142', 'name': 'Машиностроение', 'p...  Саратовская область   \n\n  is_train  Id job_cluster  date_float  only_saturday_and_sunday  \\\n0        1 NaN        13.0     2022.05                         0   \n1        1 NaN        21.0     2022.05                         0   \n2        1 NaN        11.0     2022.05                         0   \n3        1 NaN        21.0     2022.05                         0   \n4        1 NaN        21.0     2022.05                         0   \n\n   start_after_sixteen_in_intervals  start_after_sixteen_in_modes  \n0                                 0                             0  \n1                                 0                             0  \n2                                 0                             0  \n3                                 0                             0  \n4                                 0                             0  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>department</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>area</th>\n      <th>type</th>\n      <th>address</th>\n      <th>archived</th>\n      <th>employer</th>\n      <th>snippet</th>\n      <th>...</th>\n      <th>key_skills</th>\n      <th>specializations</th>\n      <th>region</th>\n      <th>is_train</th>\n      <th>Id</th>\n      <th>job_cluster</th>\n      <th>date_float</th>\n      <th>only_saturday_and_sunday</th>\n      <th>start_after_sixteen_in_intervals</th>\n      <th>start_after_sixteen_in_modes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>{'id': '2', 'name': 'Санкт-Петербург', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Санкт-Петербург', 'street': 'Невский...</td>\n      <td>0</td>\n      <td>{'id': '541016', 'name': 'АРИН', 'url': 'https...</td>\n      <td>{'requirement': 'Уверенное знание компьютера‚ ...</td>\n      <td>...</td>\n      <td>[{'name': 'Жилая недвижимость'}, {'name': 'Акт...</td>\n      <td>[{'id': '20.20', 'name': 'Агент', 'profarea_id...</td>\n      <td>Санкт-Петербург</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>13.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>{'id': '1130', 'name': 'Братск', 'url': 'https...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>{'id': '1136625', 'name': 'СМП-38', 'url': 'ht...</td>\n      <td>{'requirement': 'Навыки. Коммуникативные навык...</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>[{'id': '1.172', 'name': 'Начальный уровень, М...</td>\n      <td>Иркутская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>{'id': '76', 'name': 'Ростов-на-Дону', 'url': ...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Ростов-на-Дону', 'street': '60К-9, 1...</td>\n      <td>0</td>\n      <td>{'id': '611346', 'name': 'САРМАТ, НПП', 'url':...</td>\n      <td>{'requirement': 'Высшее инженерно-техническое ...</td>\n      <td>...</td>\n      <td>[{'name': 'Linux'}, {'name': 'Bash'}, {'name':...</td>\n      <td>[{'id': '1.221', 'name': 'Программирование, Ра...</td>\n      <td>Ростовская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>11.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>{'id': '1', 'name': 'Москва', 'url': 'https://...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': 'Москва', 'street': '1-я Миусская ули...</td>\n      <td>0</td>\n      <td>{'id': '171255', 'name': 'РХТУ им. Д.И. Мендел...</td>\n      <td>{'requirement': 'Высшее образование. Опыт рабо...</td>\n      <td>...</td>\n      <td>[{'name': '1С программирование'}, {'name': 'Об...</td>\n      <td>[{'id': '3.150', 'name': 'Менеджмент продукта ...</td>\n      <td>Москва</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>{'id': '1613', 'name': 'Энгельс', 'url': 'http...</td>\n      <td>{'id': 'open', 'name': 'Открытая'}</td>\n      <td>{'city': None, 'street': None, 'building': Non...</td>\n      <td>0</td>\n      <td>{'id': '617150', 'name': 'Сигнал, группа компа...</td>\n      <td>{'requirement': 'Знание в совершенстве програм...</td>\n      <td>...</td>\n      <td>[{'name': 'Составление отчетности'}, {'name': ...</td>\n      <td>[{'id': '18.142', 'name': 'Машиностроение', 'p...</td>\n      <td>Саратовская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>"},"metadata":{}}],"execution_count":297},{"cell_type":"code","source":"sort_data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:36.947658Z","iopub.execute_input":"2025-05-26T13:53:36.948038Z","iopub.status.idle":"2025-05-26T13:53:36.993571Z","shell.execute_reply.started":"2025-05-26T13:53:36.948011Z","shell.execute_reply":"2025-05-26T13:53:36.992694Z"}},"outputs":[{"execution_count":298,"output_type":"execute_result","data":{"text/plain":"            premium      has_test  response_letter_required      archived  \\\ncount  37590.000000  37590.000000              37590.000000  37590.000000   \nmean       0.003512      0.013780                  0.016520      0.000106   \nstd        0.059155      0.116579                  0.127467      0.010315   \nmin        0.000000      0.000000                  0.000000      0.000000   \n25%        0.000000      0.000000                  0.000000      0.000000   \n50%        0.000000      0.000000                  0.000000      0.000000   \n75%        0.000000      0.000000                  0.000000      0.000000   \nmax        1.000000      1.000000                  1.000000      1.000000   \n\n       accept_temporary      is_train           Id   job_cluster  \\\ncount      37590.000000  37590.000000  7518.000000  37590.000000   \nmean           0.093083      0.800000  3758.500000     14.020617   \nstd            0.290553      0.400005  2170.403995      7.068357   \nmin            0.000000      0.000000     0.000000      0.000000   \n25%            0.000000      1.000000  1879.250000      8.000000   \n50%            0.000000      1.000000  3758.500000     16.000000   \n75%            0.000000      1.000000  5637.750000     21.000000   \nmax            1.000000      1.000000  7517.000000     21.000000   \n\n         date_float  only_saturday_and_sunday  \\\ncount  37590.000000              37590.000000   \nmean    2022.049268                  0.006571   \nstd        0.002604                  0.080795   \nmin     2022.040000                  0.000000   \n25%     2022.050000                  0.000000   \n50%     2022.050000                  0.000000   \n75%     2022.050000                  0.000000   \nmax     2022.050000                  1.000000   \n\n       start_after_sixteen_in_intervals  start_after_sixteen_in_modes  \ncount                           37590.0                  37590.000000  \nmean                                0.0                      0.019314  \nstd                                 0.0                      0.137627  \nmin                                 0.0                      0.000000  \n25%                                 0.0                      0.000000  \n50%                                 0.0                      0.000000  \n75%                                 0.0                      0.000000  \nmax                                 0.0                      1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>archived</th>\n      <th>accept_temporary</th>\n      <th>is_train</th>\n      <th>Id</th>\n      <th>job_cluster</th>\n      <th>date_float</th>\n      <th>only_saturday_and_sunday</th>\n      <th>start_after_sixteen_in_intervals</th>\n      <th>start_after_sixteen_in_modes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>7518.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.000000</td>\n      <td>37590.0</td>\n      <td>37590.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.003512</td>\n      <td>0.013780</td>\n      <td>0.016520</td>\n      <td>0.000106</td>\n      <td>0.093083</td>\n      <td>0.800000</td>\n      <td>3758.500000</td>\n      <td>14.020617</td>\n      <td>2022.049268</td>\n      <td>0.006571</td>\n      <td>0.0</td>\n      <td>0.019314</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.059155</td>\n      <td>0.116579</td>\n      <td>0.127467</td>\n      <td>0.010315</td>\n      <td>0.290553</td>\n      <td>0.400005</td>\n      <td>2170.403995</td>\n      <td>7.068357</td>\n      <td>0.002604</td>\n      <td>0.080795</td>\n      <td>0.0</td>\n      <td>0.137627</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2022.040000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1879.250000</td>\n      <td>8.000000</td>\n      <td>2022.050000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>3758.500000</td>\n      <td>16.000000</td>\n      <td>2022.050000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>5637.750000</td>\n      <td>21.000000</td>\n      <td>2022.050000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>7517.000000</td>\n      <td>21.000000</td>\n      <td>2022.050000</td>\n      <td>1.000000</td>\n      <td>0.0</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":298},{"cell_type":"code","source":"sort_data.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:41.339725Z","iopub.execute_input":"2025-05-26T13:53:41.340074Z","iopub.status.idle":"2025-05-26T13:53:41.381393Z","shell.execute_reply.started":"2025-05-26T13:53:41.340051Z","shell.execute_reply":"2025-05-26T13:53:41.380332Z"}},"outputs":[{"execution_count":299,"output_type":"execute_result","data":{"text/plain":"premium                                 0\ndepartment                          36651\nhas_test                                0\nresponse_letter_required                0\narea                                    0\ntype                                    0\naddress                             13732\narchived                                0\nemployer                                0\nsnippet                                 0\nschedule                                0\naccept_temporary                        0\nexperience                              0\nkey_skills                           6499\nspecializations                         0\nregion                                  0\nis_train                                0\nId                                  30072\njob_cluster                             0\ndate_float                              0\nonly_saturday_and_sunday                0\nstart_after_sixteen_in_intervals        0\nstart_after_sixteen_in_modes            0\ndtype: int64"},"metadata":{}}],"execution_count":299},{"cell_type":"markdown","source":"## Раскроем JSON","metadata":{}},{"cell_type":"code","source":"from collections import Counter\nimport json\n\n\ndef fix_quotes_and_parse(x):\n    if isinstance(x, str):\n        x = x.replace(\"'\", '\"')\n        x = x.replace('None', 'null').replace('True', 'true').replace('False', 'false')\n        try:\n            return json.loads(x)\n        except json.JSONDecodeError:\n            return None\n    return x\n\ndef find_json_columns(df: pd.DataFrame, sample_size=5):\n    \"\"\"Находит все колонки, содержащие JSON-подобные строки, даже с одинарными кавычками\"\"\"\n    json_cols = []\n\n    for col in df.columns:\n        if df[col].isna().all():\n            continue\n\n        samples = df[col].dropna().unique()[:sample_size]\n        is_json = True\n\n        for val in samples:\n            if isinstance(val, str):\n                fixed_val = val.replace(\"'\", '\"').replace(\"None\", \"null\").replace(\"True\", \"true\").replace(\"False\", \"false\")\n                try:\n                    json.loads(fixed_val)\n                except json.JSONDecodeError:\n                    is_json = False\n                    break\n            elif isinstance(val, (list, dict)):\n                continue\n            else:\n                is_json = False\n                break\n\n        if is_json:\n            json_cols.append(col)\n\n    return json_cols\n\ndef process_json_column(df: pd.DataFrame, col_name: str, key: str = 'name', top_n: int = 10):\n    \"\"\"\n    Обрабатывает JSON-колонку, даже если она содержит одинарные кавычки.\n    \"\"\"\n    def parse_json(x):\n        if isinstance(x, str):\n            x = x.replace(\"'\", '\"').replace('None', 'null').replace('True', 'true').replace('False', 'false')\n            try:\n                return json.loads(x)\n            except:\n                return None\n        return x\n\n    parsed_col = df[col_name].apply(parse_json)\n\n    extracted = []\n    for row in parsed_col:\n        if isinstance(row, list):\n            names = [item[key] for item in row if isinstance(item, dict) and key in item]\n        elif isinstance(row, dict) and key in row:\n            names = [row[key]]\n        else:\n            names = []\n        extracted.append(names)\n\n    new_col_name = col_name + '_' + key\n    df[new_col_name + '_list'] = extracted\n    df[new_col_name + '_count'] = [len(x) for x in extracted]\n\n    all_values = sum(extracted, [])\n    value_counts = Counter(all_values)\n    top_values = set([v for v, _ in value_counts.most_common(top_n)])\n\n    for val in top_values:\n        df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n\n    df.drop(columns=[col_name], inplace=True, errors='ignore')\n\n    return df\n\ndef preprocess_all_json_columns(df: pd.DataFrame, key: str = 'name', top_n: int = 10):\n    \"\"\"\n    Полная автоматическая обработка всех JSON-колонок,\n    включая строки с одинарными кавычками.\n    \"\"\"\n    json_cols = find_json_columns(df)\n    print(\"Найденные JSON-колонки:\", json_cols)\n\n    for col in json_cols:\n        print(f\"Обработка колонки: {col}\")\n        df = process_json_column(df, col, key=key, top_n=top_n)\n\n    return df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:44.691445Z","iopub.execute_input":"2025-05-26T13:53:44.691747Z","iopub.status.idle":"2025-05-26T13:53:44.708545Z","shell.execute_reply.started":"2025-05-26T13:53:44.691728Z","shell.execute_reply":"2025-05-26T13:53:44.707304Z"}},"outputs":[],"execution_count":300},{"cell_type":"code","source":"print(\"До обработки:\")\nprint(sort_data.head())\n\ndata_cleaned = preprocess_all_json_columns(sort_data, key='name', top_n=20)\n\nprint(\"\\nПосле обработки:\")\nprint(data_cleaned.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:53:47.065879Z","iopub.execute_input":"2025-05-26T13:53:47.066264Z","iopub.status.idle":"2025-05-26T13:56:15.214397Z","shell.execute_reply.started":"2025-05-26T13:53:47.066239Z","shell.execute_reply":"2025-05-26T13:56:15.213300Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"До обработки:\n   premium department  has_test  response_letter_required  \\\n0        0        NaN         0                         0   \n1        0        NaN         0                         0   \n2        0        NaN         0                         0   \n3        0        NaN         0                         0   \n4        0        NaN         0                         0   \n\n                                                area  \\\n0  {'id': '2', 'name': 'Санкт-Петербург', 'url': ...   \n1  {'id': '1130', 'name': 'Братск', 'url': 'https...   \n2  {'id': '76', 'name': 'Ростов-на-Дону', 'url': ...   \n3  {'id': '1', 'name': 'Москва', 'url': 'https://...   \n4  {'id': '1613', 'name': 'Энгельс', 'url': 'http...   \n\n                                 type  \\\n0  {'id': 'open', 'name': 'Открытая'}   \n1  {'id': 'open', 'name': 'Открытая'}   \n2  {'id': 'open', 'name': 'Открытая'}   \n3  {'id': 'open', 'name': 'Открытая'}   \n4  {'id': 'open', 'name': 'Открытая'}   \n\n                                             address  archived  \\\n0  {'city': 'Санкт-Петербург', 'street': 'Невский...         0   \n1                                                NaN         0   \n2  {'city': 'Ростов-на-Дону', 'street': '60К-9, 1...         0   \n3  {'city': 'Москва', 'street': '1-я Миусская ули...         0   \n4  {'city': None, 'street': None, 'building': Non...         0   \n\n                                            employer  \\\n0  {'id': '541016', 'name': 'АРИН', 'url': 'https...   \n1  {'id': '1136625', 'name': 'СМП-38', 'url': 'ht...   \n2  {'id': '611346', 'name': 'САРМАТ, НПП', 'url':...   \n3  {'id': '171255', 'name': 'РХТУ им. Д.И. Мендел...   \n4  {'id': '617150', 'name': 'Сигнал, группа компа...   \n\n                                             snippet  ...  \\\n0  {'requirement': 'Уверенное знание компьютера‚ ...  ...   \n1  {'requirement': 'Навыки. Коммуникативные навык...  ...   \n2  {'requirement': 'Высшее инженерно-техническое ...  ...   \n3  {'requirement': 'Высшее образование. Опыт рабо...  ...   \n4  {'requirement': 'Знание в совершенстве програм...  ...   \n\n                                          key_skills  \\\n0  [{'name': 'Жилая недвижимость'}, {'name': 'Акт...   \n1                                                NaN   \n2  [{'name': 'Linux'}, {'name': 'Bash'}, {'name':...   \n3  [{'name': '1С программирование'}, {'name': 'Об...   \n4  [{'name': 'Составление отчетности'}, {'name': ...   \n\n                                     specializations               region  \\\n0  [{'id': '20.20', 'name': 'Агент', 'profarea_id...      Санкт-Петербург   \n1  [{'id': '1.172', 'name': 'Начальный уровень, М...    Иркутская область   \n2  [{'id': '1.221', 'name': 'Программирование, Ра...   Ростовская область   \n3  [{'id': '3.150', 'name': 'Менеджмент продукта ...               Москва   \n4  [{'id': '18.142', 'name': 'Машиностроение', 'p...  Саратовская область   \n\n  is_train  Id job_cluster  date_float  only_saturday_and_sunday  \\\n0        1 NaN        13.0     2022.05                         0   \n1        1 NaN        21.0     2022.05                         0   \n2        1 NaN        11.0     2022.05                         0   \n3        1 NaN        21.0     2022.05                         0   \n4        1 NaN        21.0     2022.05                         0   \n\n   start_after_sixteen_in_intervals  start_after_sixteen_in_modes  \n0                                 0                             0  \n1                                 0                             0  \n2                                 0                             0  \n3                                 0                             0  \n4                                 0                             0  \n\n[5 rows x 23 columns]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"name":"stdout","text":"Найденные JSON-колонки: ['area', 'type', 'address', 'employer', 'snippet', 'schedule', 'experience', 'key_skills', 'specializations']\nОбработка колонки: area\nОбработка колонки: type\nОбработка колонки: address\nОбработка колонки: employer\nОбработка колонки: snippet\nОбработка колонки: schedule\nОбработка колонки: experience\nОбработка колонки: key_skills\nОбработка колонки: specializations\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n","output_type":"stream"},{"name":"stdout","text":"\nПосле обработки:\n   premium department  has_test  response_letter_required  archived  \\\n0        0        NaN         0                         0         0   \n1        0        NaN         0                         0         0   \n2        0        NaN         0                         0         0   \n3        0        NaN         0                         0         0   \n4        0        NaN         0                         0         0   \n\n   accept_temporary               region  is_train  Id  job_cluster  ...  \\\n0                 0      Санкт-Петербург         1 NaN         13.0  ...   \n1                 0    Иркутская область         1 NaN         21.0  ...   \n2                 0   Ростовская область         1 NaN         11.0  ...   \n3                 0               Москва         1 NaN         21.0  ...   \n4                 0  Саратовская область         1 NaN         21.0  ...   \n\n   specializations_name_has_Интернет  specializations_name_has_Web инженер  \\\n0                                  0                                     0   \n1                                  1                                     0   \n2                                  0                                     1   \n3                                  0                                     0   \n4                                  0                                     0   \n\n   specializations_name_has_Аналитик  \\\n0                                  0   \n1                                  0   \n2                                  0   \n3                                  0   \n4                                  0   \n\n   specializations_name_has_Системный администратор  \\\n0                                                 0   \n1                                                 1   \n2                                                 0   \n3                                                 0   \n4                                                 0   \n\n  specializations_name_has_Управление персоналом  \\\n0                                              0   \n1                                              0   \n2                                              0   \n3                                              0   \n4                                              0   \n\n   specializations_name_has_Поддержка, Helpdesk  \\\n0                                             0   \n1                                             1   \n2                                             0   \n3                                             0   \n4                                             0   \n\n   specializations_name_has_Начальный уровень, Мало опыта  \\\n0                                                  1        \n1                                                  1        \n2                                                  0        \n3                                                  0        \n4                                                  0        \n\n   specializations_name_has_Системы управления предприятием (ERP)  \\\n0                                                  0                \n1                                                  0                \n2                                                  1                \n3                                                  0                \n4                                                  0                \n\n   specializations_name_has_Агент  specializations_name_has_Прямые продажи  \n0                               1                                        0  \n1                               0                                        0  \n2                               0                                        0  \n3                               0                                        0  \n4                               0                                        0  \n\n[5 rows x 124 columns]\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/tmp/ipykernel_35/274224240.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[f'{new_col_name}_has_{val}'] = df[new_col_name + '_list'].apply(lambda x: 1 if val in x else 0)\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":301},{"cell_type":"code","source":"data_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.215990Z","iopub.execute_input":"2025-05-26T13:56:15.216535Z","iopub.status.idle":"2025-05-26T13:56:15.239420Z","shell.execute_reply.started":"2025-05-26T13:56:15.216509Z","shell.execute_reply":"2025-05-26T13:56:15.238327Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":302,"output_type":"execute_result","data":{"text/plain":"   premium department  has_test  response_letter_required  archived  \\\n0        0        NaN         0                         0         0   \n1        0        NaN         0                         0         0   \n2        0        NaN         0                         0         0   \n3        0        NaN         0                         0         0   \n4        0        NaN         0                         0         0   \n\n   accept_temporary               region  is_train  Id  job_cluster  ...  \\\n0                 0      Санкт-Петербург         1 NaN         13.0  ...   \n1                 0    Иркутская область         1 NaN         21.0  ...   \n2                 0   Ростовская область         1 NaN         11.0  ...   \n3                 0               Москва         1 NaN         21.0  ...   \n4                 0  Саратовская область         1 NaN         21.0  ...   \n\n   specializations_name_has_Интернет  specializations_name_has_Web инженер  \\\n0                                  0                                     0   \n1                                  1                                     0   \n2                                  0                                     1   \n3                                  0                                     0   \n4                                  0                                     0   \n\n   specializations_name_has_Аналитик  \\\n0                                  0   \n1                                  0   \n2                                  0   \n3                                  0   \n4                                  0   \n\n   specializations_name_has_Системный администратор  \\\n0                                                 0   \n1                                                 1   \n2                                                 0   \n3                                                 0   \n4                                                 0   \n\n  specializations_name_has_Управление персоналом  \\\n0                                              0   \n1                                              0   \n2                                              0   \n3                                              0   \n4                                              0   \n\n   specializations_name_has_Поддержка, Helpdesk  \\\n0                                             0   \n1                                             1   \n2                                             0   \n3                                             0   \n4                                             0   \n\n   specializations_name_has_Начальный уровень, Мало опыта  \\\n0                                                  1        \n1                                                  1        \n2                                                  0        \n3                                                  0        \n4                                                  0        \n\n   specializations_name_has_Системы управления предприятием (ERP)  \\\n0                                                  0                \n1                                                  0                \n2                                                  1                \n3                                                  0                \n4                                                  0                \n\n   specializations_name_has_Агент  specializations_name_has_Прямые продажи  \n0                               1                                        0  \n1                               0                                        0  \n2                               0                                        0  \n3                               0                                        0  \n4                               0                                        0  \n\n[5 rows x 124 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>department</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>archived</th>\n      <th>accept_temporary</th>\n      <th>region</th>\n      <th>is_train</th>\n      <th>Id</th>\n      <th>job_cluster</th>\n      <th>...</th>\n      <th>specializations_name_has_Интернет</th>\n      <th>specializations_name_has_Web инженер</th>\n      <th>specializations_name_has_Аналитик</th>\n      <th>specializations_name_has_Системный администратор</th>\n      <th>specializations_name_has_Управление персоналом</th>\n      <th>specializations_name_has_Поддержка, Helpdesk</th>\n      <th>specializations_name_has_Начальный уровень, Мало опыта</th>\n      <th>specializations_name_has_Системы управления предприятием (ERP)</th>\n      <th>specializations_name_has_Агент</th>\n      <th>specializations_name_has_Прямые продажи</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Санкт-Петербург</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>13.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Иркутская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Ростовская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>11.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Москва</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Саратовская область</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 124 columns</p>\n</div>"},"metadata":{}}],"execution_count":302},{"cell_type":"markdown","source":"## Избавимся от столбцов с большим количеством пропусков","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndef remove_high_nan_columns(df, threshold=0.4):\n    \"\"\"\n    Удаляет столбцы, где доля значений np.nan превышает заданный порог.\n    \n    Parameters:\n        df (pd.DataFrame): Входной DataFrame\n        threshold (float): Порог доли nan (0-1). По умолчанию 0.4 (40%)\n    \n    Returns:\n        pd.DataFrame: DataFrame с удаленными столбцами\n    \"\"\"\n    nan_ratio = df.apply(lambda col: col.isna().mean() if col.dtype.kind in 'biufc' else 0)\n    print(nan_ratio)\n    \n    cols_to_keep = nan_ratio[nan_ratio <= threshold].index\n    return df[cols_to_keep]\n\ndata_cleaned = remove_high_missing_columns(data_cleaned, threshold=0.4)\n\nprint(f\"Удалено столбцов: {len(data_cleaned.columns) - len(data_cleaned.columns)}\")\nprint(f\"Оставшиеся столбцы: {list(data_cleaned.columns)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.240368Z","iopub.execute_input":"2025-05-26T13:56:15.240679Z","iopub.status.idle":"2025-05-26T13:56:15.324966Z","shell.execute_reply.started":"2025-05-26T13:56:15.240649Z","shell.execute_reply":"2025-05-26T13:56:15.323948Z"}},"outputs":[{"name":"stdout","text":"Удалено столбцов: 0\nОставшиеся столбцы: ['premium', 'has_test', 'response_letter_required', 'archived', 'accept_temporary', 'region', 'is_train', 'job_cluster', 'date_float', 'only_saturday_and_sunday', 'start_after_sixteen_in_intervals', 'start_after_sixteen_in_modes', 'area_name_list', 'area_name_count', 'area_name_has_Санкт-Петербург', 'area_name_has_Москва', 'area_name_has_Владивосток', 'area_name_has_Барнаул', 'area_name_has_Челябинск', 'area_name_has_Пермь', 'area_name_has_Уфа', 'area_name_has_Воронеж', 'area_name_has_Новосибирск', 'area_name_has_Иркутск', 'area_name_has_Самара', 'area_name_has_Сочи', 'area_name_has_Нижний Новгород', 'area_name_has_Тюмень', 'area_name_has_Краснодар', 'area_name_has_Казань', 'area_name_has_Ростов-на-Дону', 'area_name_has_Красноярск', 'area_name_has_Омск', 'area_name_has_Екатеринбург', 'type_name_list', 'type_name_count', 'type_name_has_Открытая', 'type_name_has_Анонимная', 'type_name_has_Рекламная', 'address_name_list', 'address_name_count', 'employer_name_list', 'employer_name_count', 'employer_name_has_Агентство недвижимости ЛЕТО', 'employer_name_has_ОНИКС-Недвижимость', 'employer_name_has_Спецремонт', 'employer_name_has_JCat.ru', 'employer_name_has_Этажи Центр', 'employer_name_has_Алабуга, ОЭЗ ППТ', 'employer_name_has_Этажи Урал', 'employer_name_has_Ростелеком', 'employer_name_has_Почта России', 'employer_name_has_Восток.Софт', 'employer_name_has_МТС', 'employer_name_has_Красное & Белое, розничная сеть', 'employer_name_has_Тензор', 'employer_name_has_ЕФИН', 'employer_name_has_Агентство недвижимости АТЛАС', 'employer_name_has_Яндекс', 'employer_name_has_Первый Бит', 'employer_name_has_ИНКОМ-НЕДВИЖИМОСТЬ', 'employer_name_has_Этажи Поволжье', 'employer_name_has_Азбука Недвижимости', 'snippet_name_list', 'snippet_name_count', 'schedule_name_list', 'schedule_name_count', 'schedule_name_has_Вахтовый метод', 'schedule_name_has_Полный день', 'schedule_name_has_Удаленная работа', 'schedule_name_has_Сменный график', 'schedule_name_has_Гибкий график', 'experience_name_list', 'experience_name_count', 'experience_name_has_Нет опыта', 'experience_name_has_От 1 года до 3 лет', 'experience_name_has_Более 6 лет', 'experience_name_has_От 3 до 6 лет', 'key_skills_name_list', 'key_skills_name_count', 'key_skills_name_has_Английский язык', 'key_skills_name_has_Деловое общение', 'key_skills_name_has_1С программирование', 'key_skills_name_has_Работа в команде', 'key_skills_name_has_Грамотность', 'key_skills_name_has_Организаторские навыки', 'key_skills_name_has_Жилая недвижимость', 'key_skills_name_has_Linux', 'key_skills_name_has_Обучение и развитие', 'key_skills_name_has_Подбор персонала', 'key_skills_name_has_Активные продажи', 'key_skills_name_has_Пользователь ПК', 'key_skills_name_has_Git', 'key_skills_name_has_Ведение переговоров', 'key_skills_name_has_Работа с большим объемом информации', 'key_skills_name_has_Навыки продаж', 'key_skills_name_has_Телефонные переговоры', 'key_skills_name_has_SQL', 'key_skills_name_has_Деловая переписка', 'key_skills_name_has_Грамотная речь', 'specializations_name_list', 'specializations_name_count', 'specializations_name_has_Менеджер по работе с клиентами', 'specializations_name_has_Инженер', 'specializations_name_has_Web мастер', 'specializations_name_has_Недвижимость', 'specializations_name_has_Другое', 'specializations_name_has_Развитие персонала', 'specializations_name_has_Программирование, Разработка', 'specializations_name_has_Сетевые технологии', 'specializations_name_has_Рекрутмент', 'specializations_name_has_Учет кадров', 'specializations_name_has_Интернет', 'specializations_name_has_Web инженер', 'specializations_name_has_Аналитик', 'specializations_name_has_Системный администратор', 'specializations_name_has_Управление персоналом', 'specializations_name_has_Поддержка, Helpdesk', 'specializations_name_has_Начальный уровень, Мало опыта', 'specializations_name_has_Системы управления предприятием (ERP)', 'specializations_name_has_Агент', 'specializations_name_has_Прямые продажи']\n","output_type":"stream"}],"execution_count":303},{"cell_type":"markdown","source":"## Закодируем регионы","metadata":{}},{"cell_type":"code","source":"data_cleaned.region.unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.326974Z","iopub.execute_input":"2025-05-26T13:56:15.327378Z","iopub.status.idle":"2025-05-26T13:56:15.337544Z","shell.execute_reply.started":"2025-05-26T13:56:15.327352Z","shell.execute_reply":"2025-05-26T13:56:15.336268Z"}},"outputs":[{"execution_count":304,"output_type":"execute_result","data":{"text/plain":"array(['Санкт-Петербург', 'Иркутская область', 'Ростовская область',\n       'Москва', 'Саратовская область', 'Самарская область',\n       'Московская область', 'Приморский край', 'Псковская область',\n       'Пензенская область', 'Свердловская область',\n       'Челябинская область', 'Республика Татарстан',\n       'Белгородская область', 'Краснодарский край',\n       'Новосибирская область', 'Удмуртская Республика', 'Омская область',\n       'Тюменская область', 'Красноярский край', 'Нижегородская область',\n       'Томская область', 'Ставропольский край',\n       'Республика Башкортостан', 'Оренбургская область',\n       'Республика Крым', 'Воронежская область', 'Владимирская область',\n       'Ивановская область', 'Амурская область', 'Кемеровская область',\n       'Республика Алтай', 'Ханты-Мансийский АО - Югра',\n       'Тамбовская область', 'Волгоградская область',\n       'Костромская область', 'Алтайский край', 'Смоленская область',\n       'Республика Марий Эл', 'Хабаровский край', 'Республика Карелия',\n       'Тверская область', 'Чувашская Республика', 'Новгородская область',\n       'Курганская область', 'Пермский край', 'Тульская область',\n       'Магаданская область', 'Калининградская область',\n       'Курская область', 'Республика Бурятия', 'Ульяновская область',\n       'Республика Мордовия', 'Кировская область', 'Республика Хакасия',\n       'Брянская область', 'Республика Северная Осетия-Алания',\n       'Республика Дагестан', 'Рязанская область', 'Ярославская область',\n       'Вологодская область', 'Мурманская область', 'Орловская область',\n       'Архангельская область', 'Ленинградская область',\n       'Липецкая область', 'Забайкальский край', 'Астраханская область',\n       'Сахалинская область', 'Калужская область', 'Республика Коми',\n       'Ямало-Ненецкий АО', 'Еврейская АО', 'Республика Саха (Якутия)',\n       'Камчатский край', 'Республика Ингушетия', 'Чеченская республика',\n       'Республика Адыгея', 'Карачаево-Черкесская Республика',\n       'Кабардино-Балкарская республика', 'Республика Калмыкия',\n       'Республика Тыва'], dtype=object)"},"metadata":{}}],"execution_count":304},{"cell_type":"code","source":"regions = data_cleaned['region'].unique()\nregion_to_code = {region: idx for idx, region in enumerate(regions)}\nprint(region_to_code)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.338573Z","iopub.execute_input":"2025-05-26T13:56:15.338863Z","iopub.status.idle":"2025-05-26T13:56:15.359054Z","shell.execute_reply.started":"2025-05-26T13:56:15.338842Z","shell.execute_reply":"2025-05-26T13:56:15.358027Z"}},"outputs":[{"name":"stdout","text":"{'Санкт-Петербург': 0, 'Иркутская область': 1, 'Ростовская область': 2, 'Москва': 3, 'Саратовская область': 4, 'Самарская область': 5, 'Московская область': 6, 'Приморский край': 7, 'Псковская область': 8, 'Пензенская область': 9, 'Свердловская область': 10, 'Челябинская область': 11, 'Республика Татарстан': 12, 'Белгородская область': 13, 'Краснодарский край': 14, 'Новосибирская область': 15, 'Удмуртская Республика': 16, 'Омская область': 17, 'Тюменская область': 18, 'Красноярский край': 19, 'Нижегородская область': 20, 'Томская область': 21, 'Ставропольский край': 22, 'Республика Башкортостан': 23, 'Оренбургская область': 24, 'Республика Крым': 25, 'Воронежская область': 26, 'Владимирская область': 27, 'Ивановская область': 28, 'Амурская область': 29, 'Кемеровская область': 30, 'Республика Алтай': 31, 'Ханты-Мансийский АО - Югра': 32, 'Тамбовская область': 33, 'Волгоградская область': 34, 'Костромская область': 35, 'Алтайский край': 36, 'Смоленская область': 37, 'Республика Марий Эл': 38, 'Хабаровский край': 39, 'Республика Карелия': 40, 'Тверская область': 41, 'Чувашская Республика': 42, 'Новгородская область': 43, 'Курганская область': 44, 'Пермский край': 45, 'Тульская область': 46, 'Магаданская область': 47, 'Калининградская область': 48, 'Курская область': 49, 'Республика Бурятия': 50, 'Ульяновская область': 51, 'Республика Мордовия': 52, 'Кировская область': 53, 'Республика Хакасия': 54, 'Брянская область': 55, 'Республика Северная Осетия-Алания': 56, 'Республика Дагестан': 57, 'Рязанская область': 58, 'Ярославская область': 59, 'Вологодская область': 60, 'Мурманская область': 61, 'Орловская область': 62, 'Архангельская область': 63, 'Ленинградская область': 64, 'Липецкая область': 65, 'Забайкальский край': 66, 'Астраханская область': 67, 'Сахалинская область': 68, 'Калужская область': 69, 'Республика Коми': 70, 'Ямало-Ненецкий АО': 71, 'Еврейская АО': 72, 'Республика Саха (Якутия)': 73, 'Камчатский край': 74, 'Республика Ингушетия': 75, 'Чеченская республика': 76, 'Республика Адыгея': 77, 'Карачаево-Черкесская Республика': 78, 'Кабардино-Балкарская республика': 79, 'Республика Калмыкия': 80, 'Республика Тыва': 81}\n","output_type":"stream"}],"execution_count":305},{"cell_type":"code","source":"data_cleaned['region'] = pd.factorize(data_cleaned['region'])[0]\ndata_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.359989Z","iopub.execute_input":"2025-05-26T13:56:15.360241Z","iopub.status.idle":"2025-05-26T13:56:15.397177Z","shell.execute_reply.started":"2025-05-26T13:56:15.360189Z","shell.execute_reply":"2025-05-26T13:56:15.396100Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/677272698.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_cleaned['region'] = pd.factorize(data_cleaned['region'])[0]\n","output_type":"stream"},{"execution_count":306,"output_type":"execute_result","data":{"text/plain":"   premium  has_test  response_letter_required  archived  accept_temporary  \\\n0        0         0                         0         0                 0   \n1        0         0                         0         0                 0   \n2        0         0                         0         0                 0   \n3        0         0                         0         0                 0   \n4        0         0                         0         0                 0   \n\n   region  is_train  job_cluster  date_float  only_saturday_and_sunday  ...  \\\n0       0         1         13.0     2022.05                         0  ...   \n1       1         1         21.0     2022.05                         0  ...   \n2       2         1         11.0     2022.05                         0  ...   \n3       3         1         21.0     2022.05                         0  ...   \n4       4         1         21.0     2022.05                         0  ...   \n\n   specializations_name_has_Интернет  specializations_name_has_Web инженер  \\\n0                                  0                                     0   \n1                                  1                                     0   \n2                                  0                                     1   \n3                                  0                                     0   \n4                                  0                                     0   \n\n  specializations_name_has_Аналитик  \\\n0                                 0   \n1                                 0   \n2                                 0   \n3                                 0   \n4                                 0   \n\n   specializations_name_has_Системный администратор  \\\n0                                                 0   \n1                                                 1   \n2                                                 0   \n3                                                 0   \n4                                                 0   \n\n   specializations_name_has_Управление персоналом  \\\n0                                               0   \n1                                               0   \n2                                               0   \n3                                               0   \n4                                               0   \n\n   specializations_name_has_Поддержка, Helpdesk  \\\n0                                             0   \n1                                             1   \n2                                             0   \n3                                             0   \n4                                             0   \n\n   specializations_name_has_Начальный уровень, Мало опыта  \\\n0                                                  1        \n1                                                  1        \n2                                                  0        \n3                                                  0        \n4                                                  0        \n\n   specializations_name_has_Системы управления предприятием (ERP)  \\\n0                                                  0                \n1                                                  0                \n2                                                  1                \n3                                                  0                \n4                                                  0                \n\n   specializations_name_has_Агент  specializations_name_has_Прямые продажи  \n0                               1                                        0  \n1                               0                                        0  \n2                               0                                        0  \n3                               0                                        0  \n4                               0                                        0  \n\n[5 rows x 122 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>archived</th>\n      <th>accept_temporary</th>\n      <th>region</th>\n      <th>is_train</th>\n      <th>job_cluster</th>\n      <th>date_float</th>\n      <th>only_saturday_and_sunday</th>\n      <th>...</th>\n      <th>specializations_name_has_Интернет</th>\n      <th>specializations_name_has_Web инженер</th>\n      <th>specializations_name_has_Аналитик</th>\n      <th>specializations_name_has_Системный администратор</th>\n      <th>specializations_name_has_Управление персоналом</th>\n      <th>specializations_name_has_Поддержка, Helpdesk</th>\n      <th>specializations_name_has_Начальный уровень, Мало опыта</th>\n      <th>specializations_name_has_Системы управления предприятием (ERP)</th>\n      <th>specializations_name_has_Агент</th>\n      <th>specializations_name_has_Прямые продажи</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>11.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 122 columns</p>\n</div>"},"metadata":{}}],"execution_count":306},{"cell_type":"markdown","source":"## Проверим доли пропусков ","metadata":{}},{"cell_type":"code","source":"def show_missing_values_ratio(df):\n    \"\"\"\n    Выводит долю пропущенных значений (NaN) для каждого столбца DataFrame\n    \n    Parameters:\n        df (pd.DataFrame): Анализируемый DataFrame\n    \n    Returns:\n        pd.DataFrame: Таблица с долями пропусков\n    \"\"\"\n    missing_count = df.isna().sum()\n    \n    missing_ratio = (missing_count / len(df)) * 100  \n    \n    missing_df = pd.DataFrame({\n        'Столбец': missing_ratio.index,\n        'Доля пропусков (%)': missing_ratio.values.round(2)\n    })\n    \n    missing_df = missing_df.sort_values('Доля пропусков (%)', ascending=False)\n    \n    print(\"Доля пропущенных значений по столбцам:\")\n    print(missing_df.to_string(index=False))\n    \n    return missing_df\n\nresult = show_missing_values_ratio(data_cleaned)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:15.398374Z","iopub.execute_input":"2025-05-26T13:56:15.398942Z","iopub.status.idle":"2025-05-26T13:56:15.452790Z","shell.execute_reply.started":"2025-05-26T13:56:15.398908Z","shell.execute_reply":"2025-05-26T13:56:15.451831Z"}},"outputs":[{"name":"stdout","text":"Доля пропущенных значений по столбцам:\n                                                       Столбец  Доля пропусков (%)\n                                                       premium                 0.0\n                           key_skills_name_has_Пользователь ПК                 0.0\n                          key_skills_name_has_Подбор персонала                 0.0\n                       key_skills_name_has_Обучение и развитие                 0.0\n                                     key_skills_name_has_Linux                 0.0\n                        key_skills_name_has_Жилая недвижимость                 0.0\n                    key_skills_name_has_Организаторские навыки                 0.0\n                               key_skills_name_has_Грамотность                 0.0\n                          key_skills_name_has_Работа в команде                 0.0\n                       key_skills_name_has_1С программирование                 0.0\n                           key_skills_name_has_Деловое общение                 0.0\n                           key_skills_name_has_Английский язык                 0.0\n                                         key_skills_name_count                 0.0\n                                          key_skills_name_list                 0.0\n                             experience_name_has_От 3 до 6 лет                 0.0\n                               experience_name_has_Более 6 лет                 0.0\n                        experience_name_has_От 1 года до 3 лет                 0.0\n                                 experience_name_has_Нет опыта                 0.0\n                                         experience_name_count                 0.0\n                                          experience_name_list                 0.0\n                               schedule_name_has_Гибкий график                 0.0\n                              schedule_name_has_Сменный график                 0.0\n                            schedule_name_has_Удаленная работа                 0.0\n                                 schedule_name_has_Полный день                 0.0\n                              schedule_name_has_Вахтовый метод                 0.0\n                                           schedule_name_count                 0.0\n                                            schedule_name_list                 0.0\n                                            snippet_name_count                 0.0\n                                             snippet_name_list                 0.0\n                          key_skills_name_has_Активные продажи                 0.0\n                                       key_skills_name_has_Git                 0.0\n                                                      has_test                 0.0\n                       key_skills_name_has_Ведение переговоров                 0.0\n                                specializations_name_has_Агент                 0.0\nspecializations_name_has_Системы управления предприятием (ERP)                 0.0\n        specializations_name_has_Начальный уровень, Мало опыта                 0.0\n                  specializations_name_has_Поддержка, Helpdesk                 0.0\n                specializations_name_has_Управление персоналом                 0.0\n              specializations_name_has_Системный администратор                 0.0\n                             specializations_name_has_Аналитик                 0.0\n                          specializations_name_has_Web инженер                 0.0\n                             specializations_name_has_Интернет                 0.0\n                          specializations_name_has_Учет кадров                 0.0\n                           specializations_name_has_Рекрутмент                 0.0\n                   specializations_name_has_Сетевые технологии                 0.0\n         specializations_name_has_Программирование, Разработка                 0.0\n                   specializations_name_has_Развитие персонала                 0.0\n                               specializations_name_has_Другое                 0.0\n                         specializations_name_has_Недвижимость                 0.0\n                           specializations_name_has_Web мастер                 0.0\n                              specializations_name_has_Инженер                 0.0\n       specializations_name_has_Менеджер по работе с клиентами                 0.0\n                                    specializations_name_count                 0.0\n                                     specializations_name_list                 0.0\n                            key_skills_name_has_Грамотная речь                 0.0\n                         key_skills_name_has_Деловая переписка                 0.0\n                                       key_skills_name_has_SQL                 0.0\n                     key_skills_name_has_Телефонные переговоры                 0.0\n                             key_skills_name_has_Навыки продаж                 0.0\n       key_skills_name_has_Работа с большим объемом информации                 0.0\n                         employer_name_has_Азбука Недвижимости                 0.0\n                              employer_name_has_Этажи Поволжье                 0.0\n                          employer_name_has_ИНКОМ-НЕДВИЖИМОСТЬ                 0.0\n                                  employer_name_has_Первый Бит                 0.0\n                                       area_name_has_Краснодар                 0.0\n                                          area_name_has_Тюмень                 0.0\n                                 area_name_has_Нижний Новгород                 0.0\n                                            area_name_has_Сочи                 0.0\n                                          area_name_has_Самара                 0.0\n                                         area_name_has_Иркутск                 0.0\n                                     area_name_has_Новосибирск                 0.0\n                                         area_name_has_Воронеж                 0.0\n                                             area_name_has_Уфа                 0.0\n                                           area_name_has_Пермь                 0.0\n                                       area_name_has_Челябинск                 0.0\n                                         area_name_has_Барнаул                 0.0\n                                     area_name_has_Владивосток                 0.0\n                                          area_name_has_Москва                 0.0\n                                 area_name_has_Санкт-Петербург                 0.0\n                                               area_name_count                 0.0\n                                                area_name_list                 0.0\n                                  start_after_sixteen_in_modes                 0.0\n                              start_after_sixteen_in_intervals                 0.0\n                                      only_saturday_and_sunday                 0.0\n                                                    date_float                 0.0\n                                                   job_cluster                 0.0\n                                                      is_train                 0.0\n                                                        region                 0.0\n                                              accept_temporary                 0.0\n                                                      archived                 0.0\n                                      response_letter_required                 0.0\n                                          area_name_has_Казань                 0.0\n                                  area_name_has_Ростов-на-Дону                 0.0\n                                      area_name_has_Красноярск                 0.0\n                                     employer_name_has_JCat.ru                 0.0\n                                      employer_name_has_Яндекс                 0.0\n                employer_name_has_Агентство недвижимости АТЛАС                 0.0\n                                        employer_name_has_ЕФИН                 0.0\n                                      employer_name_has_Тензор                 0.0\n             employer_name_has_Красное & Белое, розничная сеть                 0.0\n                                         employer_name_has_МТС                 0.0\n                                 employer_name_has_Восток.Софт                 0.0\n                                employer_name_has_Почта России                 0.0\n                                  employer_name_has_Ростелеком                 0.0\n                                  employer_name_has_Этажи Урал                 0.0\n                            employer_name_has_Алабуга, ОЭЗ ППТ                 0.0\n                                 employer_name_has_Этажи Центр                 0.0\n                                  employer_name_has_Спецремонт                 0.0\n                                            area_name_has_Омск                 0.0\n                          employer_name_has_ОНИКС-Недвижимость                 0.0\n                 employer_name_has_Агентство недвижимости ЛЕТО                 0.0\n                                           employer_name_count                 0.0\n                                            employer_name_list                 0.0\n                                            address_name_count                 0.0\n                                             address_name_list                 0.0\n                                       type_name_has_Рекламная                 0.0\n                                       type_name_has_Анонимная                 0.0\n                                        type_name_has_Открытая                 0.0\n                                               type_name_count                 0.0\n                                                type_name_list                 0.0\n                                    area_name_has_Екатеринбург                 0.0\n                       specializations_name_has_Прямые продажи                 0.0\n","output_type":"stream"}],"execution_count":307},{"cell_type":"markdown","source":"## Рассмотрим распределение зарплат","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.histplot(data_cleaned['mean_salary'], kde=True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:27:07.763544Z","iopub.execute_input":"2025-05-26T13:27:07.763774Z","iopub.status.idle":"2025-05-26T13:27:08.728200Z","shell.execute_reply.started":"2025-05-26T13:27:07.763757Z","shell.execute_reply":"2025-05-26T13:27:08.727490Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":199},{"cell_type":"markdown","source":"## Переходим к обучению ансамбля","metadata":{}},{"cell_type":"code","source":"features = data_cleaned.select_dtypes(include=['number']).drop(columns=['id'], errors='ignore')\n\nfeatures.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:56:37.023985Z","iopub.execute_input":"2025-05-26T13:56:37.024415Z","iopub.status.idle":"2025-05-26T13:56:37.124239Z","shell.execute_reply.started":"2025-05-26T13:56:37.024390Z","shell.execute_reply":"2025-05-26T13:56:37.122842Z"}},"outputs":[{"execution_count":308,"output_type":"execute_result","data":{"text/plain":"   premium  has_test  response_letter_required  archived  accept_temporary  \\\n0        0         0                         0         0                 0   \n1        0         0                         0         0                 0   \n2        0         0                         0         0                 0   \n3        0         0                         0         0                 0   \n4        0         0                         0         0                 0   \n\n   region  is_train  job_cluster  date_float  only_saturday_and_sunday  ...  \\\n0       0         1         13.0     2022.05                         0  ...   \n1       1         1         21.0     2022.05                         0  ...   \n2       2         1         11.0     2022.05                         0  ...   \n3       3         1         21.0     2022.05                         0  ...   \n4       4         1         21.0     2022.05                         0  ...   \n\n   specializations_name_has_Интернет  specializations_name_has_Web инженер  \\\n0                                  0                                     0   \n1                                  1                                     0   \n2                                  0                                     1   \n3                                  0                                     0   \n4                                  0                                     0   \n\n   specializations_name_has_Аналитик  \\\n0                                  0   \n1                                  0   \n2                                  0   \n3                                  0   \n4                                  0   \n\n   specializations_name_has_Системный администратор  \\\n0                                                 0   \n1                                                 1   \n2                                                 0   \n3                                                 0   \n4                                                 0   \n\n   specializations_name_has_Управление персоналом  \\\n0                                               0   \n1                                               0   \n2                                               0   \n3                                               0   \n4                                               0   \n\n   specializations_name_has_Поддержка, Helpdesk  \\\n0                                             0   \n1                                             1   \n2                                             0   \n3                                             0   \n4                                             0   \n\n   specializations_name_has_Начальный уровень, Мало опыта  \\\n0                                                  1        \n1                                                  1        \n2                                                  0        \n3                                                  0        \n4                                                  0        \n\n   specializations_name_has_Системы управления предприятием (ERP)  \\\n0                                                  0                \n1                                                  0                \n2                                                  1                \n3                                                  0                \n4                                                  0                \n\n   specializations_name_has_Агент  specializations_name_has_Прямые продажи  \n0                               1                                        0  \n1                               0                                        0  \n2                               0                                        0  \n3                               0                                        0  \n4                               0                                        0  \n\n[5 rows x 113 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>premium</th>\n      <th>has_test</th>\n      <th>response_letter_required</th>\n      <th>archived</th>\n      <th>accept_temporary</th>\n      <th>region</th>\n      <th>is_train</th>\n      <th>job_cluster</th>\n      <th>date_float</th>\n      <th>only_saturday_and_sunday</th>\n      <th>...</th>\n      <th>specializations_name_has_Интернет</th>\n      <th>specializations_name_has_Web инженер</th>\n      <th>specializations_name_has_Аналитик</th>\n      <th>specializations_name_has_Системный администратор</th>\n      <th>specializations_name_has_Управление персоналом</th>\n      <th>specializations_name_has_Поддержка, Helpdesk</th>\n      <th>specializations_name_has_Начальный уровень, Мало опыта</th>\n      <th>specializations_name_has_Системы управления предприятием (ERP)</th>\n      <th>specializations_name_has_Агент</th>\n      <th>specializations_name_has_Прямые продажи</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>11.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 113 columns</p>\n</div>"},"metadata":{}}],"execution_count":308},{"cell_type":"code","source":"# target = 'mean_salary'\n# y = features[target]\n\n# features = features.drop(columns=[target], errors='ignore')\n\ncolumn_mapping = {\n    old_name: f\"feature_{i+1}\" \n    for i, old_name in enumerate(features.columns)\n}\n\nfeatures_renamed = features.rename(columns=column_mapping)\n\nprint(\"Словарь замены:\")\nprint(column_mapping)\nprint(\"\\nПереименованный DataFrame:\")\nprint(features_renamed.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:57:26.493711Z","iopub.execute_input":"2025-05-26T13:57:26.494152Z","iopub.status.idle":"2025-05-26T13:57:26.522896Z","shell.execute_reply.started":"2025-05-26T13:57:26.494122Z","shell.execute_reply":"2025-05-26T13:57:26.521542Z"}},"outputs":[{"name":"stdout","text":"Словарь замены:\n{'premium': 'feature_1', 'has_test': 'feature_2', 'response_letter_required': 'feature_3', 'archived': 'feature_4', 'accept_temporary': 'feature_5', 'region': 'feature_6', 'is_train': 'feature_7', 'job_cluster': 'feature_8', 'date_float': 'feature_9', 'only_saturday_and_sunday': 'feature_10', 'start_after_sixteen_in_intervals': 'feature_11', 'start_after_sixteen_in_modes': 'feature_12', 'area_name_count': 'feature_13', 'area_name_has_Санкт-Петербург': 'feature_14', 'area_name_has_Москва': 'feature_15', 'area_name_has_Владивосток': 'feature_16', 'area_name_has_Барнаул': 'feature_17', 'area_name_has_Челябинск': 'feature_18', 'area_name_has_Пермь': 'feature_19', 'area_name_has_Уфа': 'feature_20', 'area_name_has_Воронеж': 'feature_21', 'area_name_has_Новосибирск': 'feature_22', 'area_name_has_Иркутск': 'feature_23', 'area_name_has_Самара': 'feature_24', 'area_name_has_Сочи': 'feature_25', 'area_name_has_Нижний Новгород': 'feature_26', 'area_name_has_Тюмень': 'feature_27', 'area_name_has_Краснодар': 'feature_28', 'area_name_has_Казань': 'feature_29', 'area_name_has_Ростов-на-Дону': 'feature_30', 'area_name_has_Красноярск': 'feature_31', 'area_name_has_Омск': 'feature_32', 'area_name_has_Екатеринбург': 'feature_33', 'type_name_count': 'feature_34', 'type_name_has_Открытая': 'feature_35', 'type_name_has_Анонимная': 'feature_36', 'type_name_has_Рекламная': 'feature_37', 'address_name_count': 'feature_38', 'employer_name_count': 'feature_39', 'employer_name_has_Агентство недвижимости ЛЕТО': 'feature_40', 'employer_name_has_ОНИКС-Недвижимость': 'feature_41', 'employer_name_has_Спецремонт': 'feature_42', 'employer_name_has_JCat.ru': 'feature_43', 'employer_name_has_Этажи Центр': 'feature_44', 'employer_name_has_Алабуга, ОЭЗ ППТ': 'feature_45', 'employer_name_has_Этажи Урал': 'feature_46', 'employer_name_has_Ростелеком': 'feature_47', 'employer_name_has_Почта России': 'feature_48', 'employer_name_has_Восток.Софт': 'feature_49', 'employer_name_has_МТС': 'feature_50', 'employer_name_has_Красное & Белое, розничная сеть': 'feature_51', 'employer_name_has_Тензор': 'feature_52', 'employer_name_has_ЕФИН': 'feature_53', 'employer_name_has_Агентство недвижимости АТЛАС': 'feature_54', 'employer_name_has_Яндекс': 'feature_55', 'employer_name_has_Первый Бит': 'feature_56', 'employer_name_has_ИНКОМ-НЕДВИЖИМОСТЬ': 'feature_57', 'employer_name_has_Этажи Поволжье': 'feature_58', 'employer_name_has_Азбука Недвижимости': 'feature_59', 'snippet_name_count': 'feature_60', 'schedule_name_count': 'feature_61', 'schedule_name_has_Вахтовый метод': 'feature_62', 'schedule_name_has_Полный день': 'feature_63', 'schedule_name_has_Удаленная работа': 'feature_64', 'schedule_name_has_Сменный график': 'feature_65', 'schedule_name_has_Гибкий график': 'feature_66', 'experience_name_count': 'feature_67', 'experience_name_has_Нет опыта': 'feature_68', 'experience_name_has_От 1 года до 3 лет': 'feature_69', 'experience_name_has_Более 6 лет': 'feature_70', 'experience_name_has_От 3 до 6 лет': 'feature_71', 'key_skills_name_count': 'feature_72', 'key_skills_name_has_Английский язык': 'feature_73', 'key_skills_name_has_Деловое общение': 'feature_74', 'key_skills_name_has_1С программирование': 'feature_75', 'key_skills_name_has_Работа в команде': 'feature_76', 'key_skills_name_has_Грамотность': 'feature_77', 'key_skills_name_has_Организаторские навыки': 'feature_78', 'key_skills_name_has_Жилая недвижимость': 'feature_79', 'key_skills_name_has_Linux': 'feature_80', 'key_skills_name_has_Обучение и развитие': 'feature_81', 'key_skills_name_has_Подбор персонала': 'feature_82', 'key_skills_name_has_Активные продажи': 'feature_83', 'key_skills_name_has_Пользователь ПК': 'feature_84', 'key_skills_name_has_Git': 'feature_85', 'key_skills_name_has_Ведение переговоров': 'feature_86', 'key_skills_name_has_Работа с большим объемом информации': 'feature_87', 'key_skills_name_has_Навыки продаж': 'feature_88', 'key_skills_name_has_Телефонные переговоры': 'feature_89', 'key_skills_name_has_SQL': 'feature_90', 'key_skills_name_has_Деловая переписка': 'feature_91', 'key_skills_name_has_Грамотная речь': 'feature_92', 'specializations_name_count': 'feature_93', 'specializations_name_has_Менеджер по работе с клиентами': 'feature_94', 'specializations_name_has_Инженер': 'feature_95', 'specializations_name_has_Web мастер': 'feature_96', 'specializations_name_has_Недвижимость': 'feature_97', 'specializations_name_has_Другое': 'feature_98', 'specializations_name_has_Развитие персонала': 'feature_99', 'specializations_name_has_Программирование, Разработка': 'feature_100', 'specializations_name_has_Сетевые технологии': 'feature_101', 'specializations_name_has_Рекрутмент': 'feature_102', 'specializations_name_has_Учет кадров': 'feature_103', 'specializations_name_has_Интернет': 'feature_104', 'specializations_name_has_Web инженер': 'feature_105', 'specializations_name_has_Аналитик': 'feature_106', 'specializations_name_has_Системный администратор': 'feature_107', 'specializations_name_has_Управление персоналом': 'feature_108', 'specializations_name_has_Поддержка, Helpdesk': 'feature_109', 'specializations_name_has_Начальный уровень, Мало опыта': 'feature_110', 'specializations_name_has_Системы управления предприятием (ERP)': 'feature_111', 'specializations_name_has_Агент': 'feature_112', 'specializations_name_has_Прямые продажи': 'feature_113'}\n\nПереименованный DataFrame:\n   feature_1  feature_2  feature_3  feature_4  feature_5  feature_6  \\\n0          0          0          0          0          0          0   \n1          0          0          0          0          0          1   \n2          0          0          0          0          0          2   \n3          0          0          0          0          0          3   \n4          0          0          0          0          0          4   \n\n   feature_7  feature_8  feature_9  feature_10  ...  feature_104  feature_105  \\\n0          1       13.0    2022.05           0  ...            0            0   \n1          1       21.0    2022.05           0  ...            1            0   \n2          1       11.0    2022.05           0  ...            0            1   \n3          1       21.0    2022.05           0  ...            0            0   \n4          1       21.0    2022.05           0  ...            0            0   \n\n   feature_106  feature_107  feature_108  feature_109  feature_110  \\\n0            0            0            0            0            1   \n1            0            1            0            1            1   \n2            0            0            0            0            0   \n3            0            0            0            0            0   \n4            0            0            0            0            0   \n\n   feature_111  feature_112  feature_113  \n0            0            1            0  \n1            0            0            0  \n2            1            0            0  \n3            0            0            0  \n4            0            0            0  \n\n[5 rows x 113 columns]\n","output_type":"stream"}],"execution_count":309},{"cell_type":"code","source":"X = features_renamed[features_renamed['feature_7'] == 1].drop(columns=['feature_7']).reset_index(drop=True)\nX_pred = features_renamed[features_renamed['feature_7'] == 0].drop(columns=['feature_7']).reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:58:46.604433Z","iopub.execute_input":"2025-05-26T13:58:46.605526Z","iopub.status.idle":"2025-05-26T13:58:46.653848Z","shell.execute_reply.started":"2025-05-26T13:58:46.605498Z","shell.execute_reply":"2025-05-26T13:58:46.652815Z"}},"outputs":[],"execution_count":311},{"cell_type":"code","source":"y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:58:49.215645Z","iopub.execute_input":"2025-05-26T13:58:49.215940Z","iopub.status.idle":"2025-05-26T13:58:49.224463Z","shell.execute_reply.started":"2025-05-26T13:58:49.215919Z","shell.execute_reply":"2025-05-26T13:58:49.223389Z"}},"outputs":[{"execution_count":312,"output_type":"execute_result","data":{"text/plain":"0        125000.0\n1         50000.0\n2         80000.0\n3        120000.0\n4         15000.0\n           ...   \n30067    190000.0\n30068     45000.0\n30069     75000.0\n30070     30000.0\n30071    100000.0\nName: mean_salary, Length: 30072, dtype: float64"},"metadata":{}}],"execution_count":312},{"cell_type":"code","source":"X","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:58:58.336661Z","iopub.execute_input":"2025-05-26T13:58:58.336972Z","iopub.status.idle":"2025-05-26T13:58:58.366140Z","shell.execute_reply.started":"2025-05-26T13:58:58.336951Z","shell.execute_reply":"2025-05-26T13:58:58.365299Z"}},"outputs":[{"execution_count":313,"output_type":"execute_result","data":{"text/plain":"       feature_1  feature_2  feature_3  feature_4  feature_5  feature_6  \\\n0              0          0          0          0          0          0   \n1              0          0          0          0          0          1   \n2              0          0          0          0          0          2   \n3              0          0          0          0          0          3   \n4              0          0          0          0          0          4   \n...          ...        ...        ...        ...        ...        ...   \n30067          0          0          0          0          0          3   \n30068          0          0          0          0          0         12   \n30069          0          0          0          0          0         11   \n30070          0          0          0          0          1         10   \n30071          0          0          0          0          0          3   \n\n       feature_8  feature_9  feature_10  feature_11  ...  feature_104  \\\n0           13.0    2022.05           0           0  ...            0   \n1           21.0    2022.05           0           0  ...            1   \n2           11.0    2022.05           0           0  ...            0   \n3           21.0    2022.05           0           0  ...            0   \n4           21.0    2022.05           0           0  ...            0   \n...          ...        ...         ...         ...  ...          ...   \n30067        5.0    2022.05           0           0  ...            0   \n30068       21.0    2022.05           0           0  ...            0   \n30069       11.0    2022.05           0           0  ...            0   \n30070       21.0    2022.05           0           0  ...            0   \n30071       16.0    2022.05           0           0  ...            0   \n\n       feature_105  feature_106  feature_107  feature_108  feature_109  \\\n0                0            0            0            0            0   \n1                0            0            1            0            1   \n2                1            0            0            0            0   \n3                0            0            0            0            0   \n4                0            0            0            0            0   \n...            ...          ...          ...          ...          ...   \n30067            0            0            0            0            0   \n30068            0            0            0            1            0   \n30069            1            0            0            0            0   \n30070            0            0            0            0            0   \n30071            0            0            0            0            0   \n\n       feature_110  feature_111  feature_112  feature_113  \n0                1            0            1            0  \n1                1            0            0            0  \n2                0            1            0            0  \n3                0            0            0            0  \n4                0            0            0            0  \n...            ...          ...          ...          ...  \n30067            0            0            0            0  \n30068            0            0            0            0  \n30069            0            1            0            0  \n30070            0            1            0            0  \n30071            1            0            1            1  \n\n[30072 rows x 112 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature_1</th>\n      <th>feature_2</th>\n      <th>feature_3</th>\n      <th>feature_4</th>\n      <th>feature_5</th>\n      <th>feature_6</th>\n      <th>feature_8</th>\n      <th>feature_9</th>\n      <th>feature_10</th>\n      <th>feature_11</th>\n      <th>...</th>\n      <th>feature_104</th>\n      <th>feature_105</th>\n      <th>feature_106</th>\n      <th>feature_107</th>\n      <th>feature_108</th>\n      <th>feature_109</th>\n      <th>feature_110</th>\n      <th>feature_111</th>\n      <th>feature_112</th>\n      <th>feature_113</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>30067</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>5.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30068</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30069</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11</td>\n      <td>11.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30070</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>10</td>\n      <td>21.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30071</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>16.0</td>\n      <td>2022.05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>30072 rows × 112 columns</p>\n</div>"},"metadata":{}}],"execution_count":313},{"cell_type":"code","source":"X_train_val, X_test, y_train_val, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\nX_train, X_val, y_train, y_val = train_test_split(\n    X_train_val, y_train_val, test_size=0.25, random_state=42\n)\n\nprint(\"Train shape:\", X_train.shape)\nprint(\"Val shape:\", X_val.shape)\nprint(\"Test shape:\", X_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:59:03.931845Z","iopub.execute_input":"2025-05-26T13:59:03.932182Z","iopub.status.idle":"2025-05-26T13:59:03.994240Z","shell.execute_reply.started":"2025-05-26T13:59:03.932160Z","shell.execute_reply":"2025-05-26T13:59:03.993254Z"}},"outputs":[{"name":"stdout","text":"Train shape: (18042, 112)\nVal shape: (6015, 112)\nTest shape: (6015, 112)\n","output_type":"stream"}],"execution_count":314},{"cell_type":"markdown","source":"## Найдем лучшие параметры ","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, StackingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\n\n\n\nX_train_val, X_test, y_train_val, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\nX_train, X_val, y_train, y_val = train_test_split(\n    X_train_val, y_train_val, test_size=0.25, random_state=42\n)\n\npreprocessor = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\n\nX_train_ready = preprocessor.fit_transform(X_train)\nX_val_ready = preprocessor.transform(X_val)\nX_test_ready = preprocessor.transform(X_test)\n\nparam_grid = {\n    'n_estimators': [50, 100],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2, 5],\n    'min_samples_leaf': [1, 2]\n}\n\nrf = RandomForestRegressor(random_state=42)\n\ngrid_search = GridSearchCV(\n    estimator=rf,\n    param_grid=param_grid,\n    scoring='neg_mean_squared_error',\n    cv=3,\n    n_jobs=-1,\n    verbose=1\n)\n\ngrid_search.fit(X_train_ready, y_train)\n\nbest_rf = grid_search.best_estimator_\nprint(\"Лучшие параметры:\", grid_search.best_params_)\n\nestimators = [\n    ('rf', best_rf),\n    ('gb', GradientBoostingRegressor(n_estimators=100, random_state=42)),\n    ('xgb', XGBRegressor(n_estimators=100, random_state=42)),\n    ('lgbm', LGBMRegressor(n_estimators=100, random_state=42))\n]\n\nfinal_estimator = LinearRegression()\n\nstacking_model = StackingRegressor(\n    estimators=estimators,\n    final_estimator=final_estimator,\n    cv=5\n)\n\nstacking_model.fit(X_train_ready, y_train)\n\ny_val_pred = stacking_model.predict(X_val_ready)\nval_rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))\nval_mae = mean_absolute_error(y_val, y_val_pred)\nval_r2 = r2_score(y_val, y_val_pred)\n\nprint(\"\\nВалидационные метрики:\")\nprint(f\"RMSE: {val_rmse:.4f}\")\nprint(f\"MAE: {val_mae:.4f}\")\nprint(f\"R²: {val_r2:.4f}\")\n\ny_test_pred = stacking_model.predict(X_test_ready)\ntest_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))\ntest_mae = mean_absolute_error(y_test, y_test_pred)\ntest_r2 = r2_score(y_test, y_test_pred)\n\nprint(\"\\nТестовые метрики:\")\nprint(f\"RMSE: {test_rmse:.4f}\")\nprint(f\"MAE: {test_mae:.4f}\")\nprint(f\"R²: {test_r2:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T13:59:09.001895Z","iopub.execute_input":"2025-05-26T13:59:09.002315Z","iopub.status.idle":"2025-05-26T14:03:42.627538Z","shell.execute_reply.started":"2025-05-26T13:59:09.002259Z","shell.execute_reply":"2025-05-26T14:03:42.626615Z"}},"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 24 candidates, totalling 72 fits\nЛучшие параметры: {'max_depth': 20, 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 100}\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.008501 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 438\n[LightGBM] [Info] Number of data points in the train set: 18042, number of used features: 102\n[LightGBM] [Info] Start training from score 97954.373019\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.007029 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 436\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Start training from score 97441.785699\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006842 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Start training from score 98034.969791\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006755 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 429\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 99\n[LightGBM] [Info] Start training from score 98637.571498\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006908 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 102\n[LightGBM] [Info] Start training from score 97083.472184\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006937 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 434\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 101\n[LightGBM] [Info] Start training from score 98574.035991\n\nВалидационные метрики:\nRMSE: 73580.6494\nMAE: 35951.6656\nR²: 0.5259\n\nТестовые метрики:\nRMSE: 70479.9420\nMAE: 35089.1002\nR²: 0.4798\n","output_type":"stream"}],"execution_count":315},{"cell_type":"markdown","source":"## Будем обучаться на отлогарифмированных зарплатах","metadata":{}},{"cell_type":"code","source":"y_log = np.log1p(y)\n\nX_train_val, X_test, y_train_val_log, y_test_log = train_test_split(\n    X, y_log, test_size=0.2, random_state=42\n)\n\nX_train, X_val, y_train_log, y_val_log = train_test_split(\n    X_train_val, y_train_val_log, test_size=0.25, random_state=42\n)\n\npreprocessor = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\n\nX_train_ready = preprocessor.fit_transform(X_train)\nX_val_ready = preprocessor.transform(X_val)\nX_test_ready = preprocessor.transform(X_test)\n\nbest_params = {'max_depth': 20, 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}\n\nbest_rf = RandomForestRegressor(**best_params, random_state=42)\n\nbest_rf.fit(X_train_ready, y_train_log)\n\nestimators = [\n    ('rf', best_rf),\n    ('gb', GradientBoostingRegressor(n_estimators=100, random_state=42)),\n    ('xgb', XGBRegressor(n_estimators=100, random_state=42)),\n    ('lgbm', LGBMRegressor(n_estimators=100, random_state=42))\n]\n\nfinal_estimator = LinearRegression()\n\nstacking_model = StackingRegressor(\n    estimators=estimators,\n    final_estimator=final_estimator,\n    cv=5\n)\n\nstacking_model.fit(X_train_ready, y_train_log)\n\ny_val_pred_log = stacking_model.predict(X_val_ready)\ny_val_pred = np.expm1(y_val_pred_log)  \n\nval_rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))\nval_mae = mean_absolute_error(y_val, y_val_pred)\nval_r2 = r2_score(y_val, y_val_pred)\n\n\ny_test_pred_log = stacking_model.predict(X_test_ready)\ny_test_pred = np.expm1(y_test_pred_log)  \n\ntest_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))\ntest_mae = mean_absolute_error(y_test, y_test_pred)\ntest_r2 = r2_score(y_test, y_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:03:42.629038Z","iopub.execute_input":"2025-05-26T14:03:42.629381Z","iopub.status.idle":"2025-05-26T14:04:42.674915Z","shell.execute_reply.started":"2025-05-26T14:03:42.629359Z","shell.execute_reply":"2025-05-26T14:04:42.673987Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.009997 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 438\n[LightGBM] [Info] Number of data points in the train set: 18042, number of used features: 102\n[LightGBM] [Info] Start training from score 11.184686\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006999 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 436\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Start training from score 11.181932\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.007127 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Start training from score 11.187543\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006657 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 429\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 99\n[LightGBM] [Info] Start training from score 11.188608\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006638 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 102\n[LightGBM] [Info] Start training from score 11.180148\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007601 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 434\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 101\n[LightGBM] [Info] Start training from score 11.185201\n","output_type":"stream"}],"execution_count":316},{"cell_type":"code","source":"print(\"\\nВалидационные метрики после логарифмирования:\")\nprint(f\"RMSE: {val_rmse:.4f}\")\nprint(f\"MAE: {val_mae:.4f}\")\nprint(f\"R²: {val_r2:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:04:42.675794Z","iopub.execute_input":"2025-05-26T14:04:42.676028Z","iopub.status.idle":"2025-05-26T14:04:42.682593Z","shell.execute_reply.started":"2025-05-26T14:04:42.676010Z","shell.execute_reply":"2025-05-26T14:04:42.681720Z"}},"outputs":[{"name":"stdout","text":"\nВалидационные метрики после логарифмирования:\nRMSE: 78696.4905\nMAE: 33597.1857\nR²: 0.4577\n","output_type":"stream"}],"execution_count":317},{"cell_type":"code","source":"print(\"\\nТестовые метрики после логарифмирования:\")\nprint(f\"RMSE: {test_rmse:.4f}\")\nprint(f\"MAE: {test_mae:.4f}\")\nprint(f\"R²: {test_r2:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:04:42.684500Z","iopub.execute_input":"2025-05-26T14:04:42.684754Z","iopub.status.idle":"2025-05-26T14:04:42.704672Z","shell.execute_reply.started":"2025-05-26T14:04:42.684736Z","shell.execute_reply":"2025-05-26T14:04:42.703653Z"}},"outputs":[{"name":"stdout","text":"\nТестовые метрики после логарифмирования:\nRMSE: 69963.1283\nMAE: 32765.8821\nR²: 0.4874\n","output_type":"stream"}],"execution_count":318},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ny_pred_log = stacking_model.predict(X_pred)\ny_pred = np.expm1(y_pred_log)  \n\nsubmission = pd.read_csv('/kaggle/input/ensembles-competition/Sample_Submission.csv')\n\nprint(\"Форма submission:\", submission.shape)\n\nassert len(submission) == len(y_pred), \"Длина y_pred не совпадает с количеством строк в submission!\"\n\nsubmission['Predicted'] = y_pred\n\nsubmission.to_csv('submission.csv', index=False)\n\nprint(\"Файл submission сохранён!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:08:29.351855Z","iopub.execute_input":"2025-05-26T14:08:29.352170Z","iopub.status.idle":"2025-05-26T14:08:29.396518Z","shell.execute_reply.started":"2025-05-26T14:08:29.352148Z","shell.execute_reply":"2025-05-26T14:08:29.395548Z"}},"outputs":[{"name":"stdout","text":"Форма submission: (7518, 2)\nФайл submission сохранён!\n","output_type":"stream"}],"execution_count":320},{"cell_type":"markdown","source":"## Попробуем модели посложнее","metadata":{}},{"cell_type":"code","source":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom catboost import CatBoostRegressor\n\n\n# Используем более продвинутые модели\nestimators = [\n    ('catboost', CatBoostRegressor(\n        iterations=200,\n        learning_rate=0.1,\n        depth=6,\n        loss_function='MAE',\n        verbose=0,\n        random_state=42\n    )),\n    ('lgbm', LGBMRegressor(\n        n_estimators=150,\n        learning_rate=0.1,\n        max_depth=7,\n        objective='mae',\n        random_state=42\n    )),\n    ('xgb', XGBRegressor(\n        n_estimators=150,\n        learning_rate=0.1,\n        max_depth=6,\n        objective='reg:squarederror',\n        random_state=42\n    )),\n    ('histgb', HistGradientBoostingRegressor(\n        max_iter=200,\n        learning_rate=0.1,\n        max_depth=7,\n        scoring='neg_mean_absolute_error',\n        random_state=42\n    ))\n]\n\nfinal_estimator = LinearRegression()\n\nstacking_model = StackingRegressor(\n    estimators=estimators,\n    final_estimator=final_estimator,\n    cv=5,\n    n_jobs=-1\n)\n\nstacking_model.fit(X_train_ready, y_train_log)\n\ny_val_pred_log = stacking_model.predict(X_val_ready)\ny_val_pred = np.expm1(y_val_pred_log)\n\ny_test_pred_log = stacking_model.predict(X_test_ready)\ny_test_pred = np.expm1(y_test_pred_log)\n\n# Оценка метрик\ndef evaluate_model(y_true, y_pred, name=\"\"):\n    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n    mae = mean_absolute_error(y_true, y_pred)\n    r2 = r2_score(y_true, y_pred)\n    print(f\"\\n{name} Metrics:\")\n    print(f\"RMSE: {rmse:.2f}\")\n    print(f\"MAE: {mae:.2f}\")\n    print(f\"R²: {r2:.4f}\")\n\nevaluate_model(y_val, y_val_pred, \"Validation\")\nevaluate_model(y_test, y_test_pred, \"Test\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:10:03.562139Z","iopub.execute_input":"2025-05-26T14:10:03.562904Z","iopub.status.idle":"2025-05-26T14:10:57.558407Z","shell.execute_reply.started":"2025-05-26T14:10:03.562879Z","shell.execute_reply":"2025-05-26T14:10:57.557525Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.043868 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 102\n[LightGBM] [Info] Start training from score 11.156265\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.035174 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 436\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.048868 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Total Bins 429\n[LightGBM] [Info] Start training from score 11.156265\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 99\n[LightGBM] [Info] Start training from score 11.156265\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.038128 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 437\n[LightGBM] [Info] Number of data points in the train set: 14433, number of used features: 102\n[LightGBM] [Info] Start training from score 11.156265\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.015433 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 434\n[LightGBM] [Info] Number of data points in the train set: 14434, number of used features: 101\n[LightGBM] [Info] Start training from score 11.156265\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n\nValidation Metrics:\nRMSE: 80249.95\nMAE: 34329.79\nR²: 0.4361\n\nTest Metrics:\nRMSE: 69900.41\nMAE: 33156.18\nR²: 0.4883\n","output_type":"stream"}],"execution_count":321},{"cell_type":"code","source":"evaluate_model(y_val, y_val_pred, \"Validation\")\nevaluate_model(y_test, y_test_pred, \"Test\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:10:57.559850Z","iopub.execute_input":"2025-05-26T14:10:57.560216Z","iopub.status.idle":"2025-05-26T14:10:57.571126Z","shell.execute_reply.started":"2025-05-26T14:10:57.560185Z","shell.execute_reply":"2025-05-26T14:10:57.570125Z"}},"outputs":[{"name":"stdout","text":"\nValidation Metrics:\nRMSE: 80249.95\nMAE: 34329.79\nR²: 0.4361\n\nTest Metrics:\nRMSE: 69900.41\nMAE: 33156.18\nR²: 0.4883\n","output_type":"stream"}],"execution_count":322},{"cell_type":"code","source":"y_pred_log = stacking_model.predict(X_pred)\ny_pred = np.expm1(y_pred_log)  \n\nsubmission = pd.read_csv('/kaggle/input/ensembles-competition/Sample_Submission.csv')\n\nprint(\"Форма submission:\", submission.shape)\n\nassert len(submission) == len(y_pred), \"Длина y_pred не совпадает с количеством строк в submission!\"\n\nsubmission['Predicted'] = y_pred\n\nsubmission.to_csv('submission.csv', index=False)\n\nprint(\"Файл submission сохранён!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T14:11:08.685147Z","iopub.execute_input":"2025-05-26T14:11:08.686126Z","iopub.status.idle":"2025-05-26T14:11:08.861099Z","shell.execute_reply.started":"2025-05-26T14:11:08.686100Z","shell.execute_reply":"2025-05-26T14:11:08.860072Z"}},"outputs":[{"name":"stdout","text":"Форма submission: (7518, 2)\nФайл submission сохранён!\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but HistGradientBoostingRegressor was fitted without feature names\n  warnings.warn(\n","output_type":"stream"}],"execution_count":323},{"cell_type":"markdown","source":"Лучшие метрики были достигнуты при использовании логорифмирования","metadata":{}},{"cell_type":"markdown","source":"в соревновании получается очень большая ошибка - порядка 40к \n\n\nдумаю, дело в том как был сделан препроцессинг данных","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}